<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git的使用</title>
    <url>/2022/12/02/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h3><p>Git是一个开源的分布式版本控制系统</p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Aurora&quot;  <span class="comment">&lt;!--配置用户个人名称--&gt;</span></span><br><span class="line">$ git config --global user.email 1931414264@qq.com <span class="comment">&lt;!--配置用户的电子邮件--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>

<h4 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">git clone 链接 文件夹</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6语法</title>
    <url>/2023/01/23/ES6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="变量声明-let"><a href="#变量声明-let" class="headerlink" title="变量声明   let"></a>变量声明   let</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> star = <span class="string">&quot;小明&quot;</span></span><br></pre></td></tr></table></figure>

<p>与var的区别</p>
<ol>
<li><p>变量不能重复声明</p>
</li>
<li><p>块级作用域</p>
</li>
<li><p>变量不能提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;song&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> song = <span class="string">&quot;hello&quot;</span>  <span class="comment">// 报错，输出结果应在定义变量后面</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;song&quot;</span>) <span class="comment">//输出结果是undefined</span></span><br><span class="line"><span class="keyword">var</span> song = <span class="string">&quot;hello&quot;</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>不影响作用域链</p>
</li>
</ol>
<h4 id="常量声明-const"><a href="#常量声明-const" class="headerlink" title="常量声明 const"></a>常量声明 const</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ol>
<li><p>const一定要赋初始值</p>
</li>
<li><p>变量一般采用大写</p>
</li>
<li><p>块级作用域</p>
</li>
<li><p>常量值不能修改</p>
</li>
<li><p>对于<strong>数组</strong>和<strong>对象</strong>的元素修改，不算作是常量的修改，不会报错(常量存储的是内存地址，这里修改的只是内存地址所指向的内容，并没用修改内存地址)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> team = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">team.<span class="title function_">push</span>(<span class="string">&#x27;s&#x27;</span>); <span class="comment">//常用const声明数组或者对象   </span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> star = <span class="string">`hello`</span> </span><br></pre></td></tr></table></figure>

<h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol>
<li><p>内容中可以出现换行符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> star =<span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;艾伦&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串的拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">`hello `</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">`<span class="subst">$&#123;a&#125;</span>world`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="对象的简化写法"><a href="#对象的简化写法" class="headerlink" title="对象的简化写法"></a>对象的简化写法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">     <span class="keyword">let</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">     <span class="keyword">let</span> myfunction = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以做出改变&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">let</span> person = &#123;</span><br><span class="line">        name,</span><br><span class="line">        sex,</span><br><span class="line">        myfunction,</span><br><span class="line">        <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加油&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="箭头函数声明"><a href="#箭头函数声明" class="headerlink" title="箭头函数声明"></a>箭头函数声明</h4><p>声明格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">myfunction</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> myfunction1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ol>
<li><p>this是静态的，this始终指向函数声明时所在的作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getname = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">let</span> <span class="title function_">getname1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&quot;你好&quot;</span></span><br><span class="line">     <span class="keyword">const</span> dx = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;hello&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// getname();  //输出结果是你好</span></span><br><span class="line">     <span class="comment">// getname1(); //输出结果是你好 </span></span><br><span class="line">     getname.<span class="title function_">call</span>(dx); <span class="comment">//输出结果是hello</span></span><br><span class="line">     getname1.<span class="title function_">call</span>(dx); <span class="comment">//输出结果是你好 </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不能作为构造实例化对象</p>
</li>
<li><p>不能使用arguments变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">ar</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">ar</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//结果会报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数的简写</p>
<ol>
<li><p>省略小括号，当形参有且只有一个的时候</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> n*n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">pow</span>(<span class="number">2</span>);   <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>省略花括号，当有且只有一条语句时,此时return必须省，语句的执行结果就是该返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; n*n</span><br><span class="line"><span class="title function_">pow</span>(<span class="number">3</span>);  <span class="comment">//9</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h5 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h5><ol>
<li>箭头函数适用于与this无关的回调，定时器，数组方法的回调</li>
<li>箭头函数不适用于this有关的回调，事件回调，对象方法</li>
</ol>
<h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><p>ES6引入rest参数，用于获取函数的参数，用来代替arguments</p>
<p>rest参数必须放到参数最后</p>
<h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="keyword">function</span> (<span class="params">a,b,...args</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="title function_">data</span>(<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;vv&#x27;</span>) <span class="comment">// &#x27;vv&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>扩展运算符能将<strong>数组</strong>转化为逗号分隔的参数序列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tf = [<span class="string">&#x27;王源&#x27;</span>,<span class="string">&#x27;易烊千玺&#x27;</span>,<span class="string">&#x27;王俊凯&#x27;</span>]</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="title function_">fn</span>(...tf) <span class="comment">//0: &quot;王源&quot;1: &quot;易烊千玺&quot;2: &quot;王俊凯&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tf = [<span class="string">&#x27;王源&#x27;</span>,<span class="string">&#x27;易烊千玺&#x27;</span>,<span class="string">&#x27;王俊凯&#x27;</span>];    </span><br><span class="line"><span class="comment">//数组合并</span></span><br><span class="line"><span class="keyword">const</span> yy=[<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;ss&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> yytf =[...tf,...yy];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yytf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组克隆</span></span><br><span class="line"><span class="keyword">const</span> tt = [...tf];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//伪数组转化为真正的数组</span></span><br><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divarr = [...div]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divarr);</span><br></pre></td></tr></table></figure>

<h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><ol>
<li>Symbol的值是唯一的，用于解决命名冲突的问题</li>
<li>Symbol值不能与其他数据进行运算</li>
<li>Symbol定义的对象属性不能使用<strong>for…in</strong>循环遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</li>
</ol>
<h5 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建方式-1</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s3); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//创建方式-2</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 === s5);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="javascript的数据类型"><a href="#javascript的数据类型" class="headerlink" title="javascript的数据类型"></a>javascript的数据类型</h4><p>口诀：USONB     you  are  so niubility</p>
<ol>
<li>u undefined</li>
<li>s string symbol </li>
<li>o object</li>
<li>n number null</li>
<li>b boolean</li>
</ol>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>迭代器（iterator）是一种接口，为各种不同的接口提供统一的访问机制。任何数据结构只要部署iterator接口，就可以完成遍历操作。iterator接口主要供for…of消费</p>
<p><strong>区别</strong>：for…of返回的是键值，而for…in返回的是键</p>
<h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><ol>
<li>先创建一个指针对象，指向当前数据结构的起始位置</li>
<li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li>
<li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li>
<li>每次调用next方法就会返回一个包含value和done属性（是否完成）的对象</li>
</ol>
<h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>生成器函数就是ES6提供的一种异步编程的解决方案</p>
<h5 id="声明与调用"><a href="#声明与调用" class="headerlink" title="声明与调用"></a>声明与调用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//生成器函数的声明,在function后面加*</span></span><br><span class="line"> <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello generator&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//生成器函数的调用</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成器函数的声明</span></span><br><span class="line"> <span class="comment">//file 函数的分隔符</span></span><br><span class="line"> <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;你好呀&#x27;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;333&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;你好啊&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//生成器函数的调用</span></span><br><span class="line"> <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line"> iterator.<span class="title function_">next</span>()   </span><br><span class="line"> iterator.<span class="title function_">next</span>() </span><br><span class="line"> iterator.<span class="title function_">next</span>()</span><br><span class="line"> iterator.<span class="title function_">next</span>() <span class="comment">//111 222 333</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;   </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;你好&#x27;</span>;  </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;你好呀&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;你好啊&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">gen</span>())&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;  <span class="comment">//&#x27;你好&#x27; &#x27;你好呀&#x27; &#x27;你好啊&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">     <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="string">&#x27;111&#x27;</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span><br><span class="line">     <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="string">&#x27;222&#x27;</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line">     <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="string">&#x27;333&#x27;</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>() );      <span class="comment">//AAA   </span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>));  <span class="comment">//BBB</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>));  <span class="comment">//CCC</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;DDD&#x27;</span>));  <span class="comment">//DDD</span></span><br></pre></td></tr></table></figure>

<h5 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//1s后输出111，2s后输出222，3s后输出333</span></span><br><span class="line">  <span class="comment">//这种回调函数中嵌套回调函数的情况就叫做回调地狱</span></span><br><span class="line">  <span class="comment">//方法一</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;333&#x27;</span>)</span><br><span class="line">          &#125;, <span class="number">3000</span>)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line"> <span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">          iterator.<span class="title function_">next</span>()</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">          iterator.<span class="title function_">next</span>()</span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;333&#x27;</span>)</span><br><span class="line">          iterator.<span class="title function_">next</span>()</span><br><span class="line">      &#125;,<span class="number">3000</span>)</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">one</span>()</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">two</span>()</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">three</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">  iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h5 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//模拟用户数据 订单数据 商品数据</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span></span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">           iterator.<span class="title function_">next</span>(data)</span><br><span class="line">       &#125;, <span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getOrders</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span></span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       iterator.<span class="title function_">next</span>(data)</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getGoods</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span></span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">           iterator.<span class="title function_">next</span>(data)</span><br><span class="line">       &#125;, <span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUser</span>()</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(users)</span><br><span class="line">   <span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>()</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(orders)</span><br><span class="line">   <span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>()</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(goods)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>Promise是ES6提供的一种异步编程的解决方案</p>
<h4 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [a,b,c,d]=arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">//undefind</span></span><br></pre></td></tr></table></figure>

<h4 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person=&#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">       <span class="keyword">let</span>&#123;name,age,sex&#125;=person</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//李四</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">//18</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(sex);  <span class="comment">//男</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">       <span class="keyword">let</span> &#123;<span class="attr">name</span>:myname,<span class="attr">age</span>:myage,<span class="attr">sex</span>:mysex&#125; = person</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(myname); <span class="comment">//李四</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(myage);  <span class="comment">//18</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(mysex);  <span class="comment">//男</span></span><br></pre></td></tr></table></figure>

<h4 id="剩余参数与解构赋值"><a href="#剩余参数与解构赋值" class="headerlink" title="剩余参数与解构赋值"></a>剩余参数与解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;老六&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> [s1,...s2] = arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly美化页面</title>
    <url>/2022/11/30/butterfly%E7%BE%8E%E5%8C%96%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在 <code>Hexo</code> 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 <code>Hexo</code> 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>
<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>在站点配置文件下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Aurora  #标题名字</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">#description:   #签名</span><br><span class="line">keywords:</span><br><span class="line">author: Aurora  #作者名字</span><br><span class="line">language: zh-CN #语言</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="导航栏修改"><a href="#导航栏修改" class="headerlink" title="导航栏修改"></a>导航栏修改</h3><p>在主题配置文件下</p>
<p>注意<code>fa fa-address-card</code>是图标，可以在<a href="https://fontawesome.com.cn/faicons/">图标库 – Font Awesome 中文网</a>进行选择好看的图标进行修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  首页: / || fa fa-home</span><br><span class="line">  时间轴: /archives/ || fa fa-archive</span><br><span class="line">  标签: /tags/ || fa fa-tags</span><br><span class="line">  分类: /categories/ || fa fa-folder-open</span><br><span class="line">  #音乐: /music/ || fa fa-music</span><br><span class="line">  #留言板: /messageboard/ || fa fa-paper-plane</span><br><span class="line">  #友链: /link/ || fa fa-link</span><br><span class="line">  #日志: /timeline/ || fa fa-bell</span><br><span class="line">  #关于: /about/ || fas fa-heart</span><br><span class="line">  菜单 || fa fa-list:</span><br><span class="line">     关于: /about/ || fa fa-address-card</span><br><span class="line">     音乐: /music/ || fa fa-music</span><br><span class="line">     友链: /link/ || fa fa-link</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2022/12/25/1d887a2fade14c7f85dddc43ce9b7365"></p>
<h3 id="代码块样式"><a href="#代码块样式" class="headerlink" title="代码块样式"></a>代码块样式</h3><p>在主题配置文件下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">highlight_theme: mac #  darker / pale night / light / ocean / mac / mac light / false 选择任意一个</span><br><span class="line">highlight_copy: true # copy button 是否显示复制按钮</span><br><span class="line">highlight_lang: true # show the code language 是否显示代码块语言</span><br><span class="line">highlight_shrink: false # true:打开文章默认折叠代码块内容 flase:打开文章默认展开代码块 none:关闭代码块折叠按钮</span><br><span class="line">code_word_wrap: false #关闭滚动条</span><br></pre></td></tr></table></figure>

<p>然后再站点配置文件下，将<code>line_number</code>更改为<code>false</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: false #改为false</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br></pre></td></tr></table></figure>

<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p>会在<code>\source</code>中创建对应的文件夹和index.md</p>
<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<h4 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure>

<h5 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h5><p>在Hexo目录中的<code>source/_data</code>,创建一个文件link.yml,内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">- class_name: 推荐博客</span><br><span class="line">  flink_style: flexcard</span><br><span class="line">  link_list:</span><br><span class="line">    - name: Aurora #姓名</span><br><span class="line">      link: https://echo-7self.github.io #链接</span><br><span class="line">      avatar: https://echo-7self.github.io/img/tx.jpg #头像</span><br><span class="line">      descr: 何其荣幸，何德何能 #签名</span><br></pre></td></tr></table></figure>

<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo new page timeline</span><br></pre></td></tr></table></figure>

<h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<h3 id="标题样式设置"><a href="#标题样式设置" class="headerlink" title="标题样式设置"></a>标题样式设置</h3><h4 id="副标题设置"><a href="#副标题设置" class="headerlink" title="副标题设置"></a>副标题设置</h4><p>如果没设置<code>副标题</code>，上面的<code>description：</code>签名，就是显示在主页面。而设置的话，<code>签名</code>自动不显示，<code>副标题</code>出现。</p>
<p>在主题配置文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (打字效果)</span><br><span class="line">  sub:</span><br><span class="line">     - 有生之年，有幸遇见</span><br><span class="line">     - 何其荣幸，何德何能</span><br><span class="line">     - 爱意随风起，风止意难平</span><br><span class="line">     - 究竟是怎样的结局，才配得上这一路的颠沛流离</span><br></pre></td></tr></table></figure>

<p>打字效果<strong>注意事项</strong>：</p>
<ul>
<li>如果关闭打字效果，subtitle只会显示sub的第一行文字</li>
</ul>
<h4 id="副标题字体大小设置"><a href="#副标题字体大小设置" class="headerlink" title="副标题字体大小设置"></a>副标题字体大小设置</h4><p>在<code>\themes\butterfly\source\css\_layout</code>中的<code>head.styl</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#site-subtitle</span><br><span class="line">  color: var(--light-grey)  字体颜色</span><br><span class="line">  font-size: 1.15em  字体大小</span><br></pre></td></tr></table></figure>

<h3 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h3><p>图片可以使用<code>网上的图片</code>(即使用该<code>图片链接</code>)，也可以使用<code>\themes\butterfly\source\img</code>下的图片。</p>
<p>以下设置均在主题配置文件下进行</p>
<h4 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Favicon（网站图标）</span><br><span class="line">favicon: /img/tx.jpg</span><br></pre></td></tr></table></figure>

<h4 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Avatar (头像)</span><br><span class="line">avatar:</span><br><span class="line">  img: ../img/tx.jpg</span><br><span class="line">  effect: true</span><br></pre></td></tr></table></figure>

<h4 id="主页面图片"><a href="#主页面图片" class="headerlink" title="主页面图片"></a>主页面图片</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">index_img: /img/background.jpg</span><br></pre></td></tr></table></figure>

<h4 id="子标签页图片"><a href="#子标签页图片" class="headerlink" title="子标签页图片"></a>子标签页图片</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># The banner image of archive page</span><br><span class="line">archive_img: /img/background.jpg</span><br></pre></td></tr></table></figure>

<h4 id="文章列表图片"><a href="#文章列表图片" class="headerlink" title="文章列表图片"></a>文章列表图片</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cover:</span><br><span class="line">  # display the cover or not (是否显示文章封面)</span><br><span class="line">  index_enable: true</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  # the position of cover in home page (封面显示的位置)</span><br><span class="line">  # left/right/both</span><br><span class="line">  position: both</span><br><span class="line">  # When cover is not set, the default cover is displayed (当没有设置cover封面时，默认显示)</span><br><span class="line">  default_cover:</span><br><span class="line">    # - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span><br></pre></td></tr></table></figure>

<h3 id="文章页样式"><a href="#文章页样式" class="headerlink" title="文章页样式"></a>文章页样式</h3><p>均在主题配置文件中</p>
<h4 id="复制后面的内容加上版权信息"><a href="#复制后面的内容加上版权信息" class="headerlink" title="复制后面的内容加上版权信息"></a>复制后面的内容加上版权信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># copyright: Add the copyright information after copied content (复制的內容后面加上版权信息)</span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line">    enable: false</span><br><span class="line">    limit_count: 100  #超过100字数，添加版权信息</span><br></pre></td></tr></table></figure>

<h4 id="文章版权信息"><a href="#文章版权信息" class="headerlink" title="文章版权信息"></a>文章版权信息</h4><p>在底部会出现对应的作者、链接、声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: true</span><br><span class="line">  author_href:</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure>

<h4 id="toc目录"><a href="#toc目录" class="headerlink" title="toc目录"></a>toc目录</h4><p>在文章页会有一个目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  post: true</span><br><span class="line">  page: false</span><br><span class="line">  number: true</span><br><span class="line">  expand: false</span><br><span class="line">  style_simple: false # for post</span><br><span class="line">  auto_open: true</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2022/12/25/9abd4bd09ffa4354ac1af3928402d95e"></p>
<h4 id="相关文章推送"><a href="#相关文章推送" class="headerlink" title="相关文章推送"></a>相关文章推送</h4><p>在文章最下面，会出现相关信息文章的推送。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Related Articles</span><br><span class="line">related_post:</span><br><span class="line">  enable: false</span><br><span class="line">  limit: 6 # Number of posts displayed</span><br><span class="line">  date_type: created # or created or updated 文章日期显示创建日或者更新日</span><br></pre></td></tr></table></figure>

<h3 id="侧边框样式"><a href="#侧边框样式" class="headerlink" title="侧边框样式"></a>侧边框样式</h3><p>均在主题配置文件下进行修改</p>
<h4 id="侧边框出现的位置"><a href="#侧边框出现的位置" class="headerlink" title="侧边框出现的位置"></a>侧边框出现的位置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # left or right</span><br></pre></td></tr></table></figure>

<h4 id="公告"><a href="#公告" class="headerlink" title="公告"></a>公告</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">card_announcement:</span><br><span class="line">   enable: true</span><br><span class="line">   content: 欢迎访问</span><br></pre></td></tr></table></figure>

<h4 id="访问人数和运行时间"><a href="#访问人数和运行时间" class="headerlink" title="访问人数和运行时间"></a>访问人数和运行时间</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 访问人數</span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br><span class="line"># Time difference between publish date and now (网页运行时间)</span><br><span class="line"># Formal: Month/Day/Year Time or Year/Month/Day Time</span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 2022/11/25 00:00:00</span><br></pre></td></tr></table></figure>

<h3 id="页面特效"><a href="#页面特效" class="headerlink" title="页面特效"></a>页面特效</h3><p>均在主题配置文件下进行修改</p>
<h4 id="静态彩带"><a href="#静态彩带" class="headerlink" title="静态彩带"></a>静态彩带</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 150</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br><span class="line">  click_to_change: true</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure>

<p>点击页面，彩带就出现了</p>
<h4 id="动态彩带"><a href="#动态彩带" class="headerlink" title="动态彩带"></a>动态彩带</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Fluttering Ribbon (动态彩帶)</span><br><span class="line">canvas_fluttering_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure>

<h3 id="底部设置"><a href="#底部设置" class="headerlink" title="底部设置"></a>底部设置</h3><p>主题配置文件下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  owner:</span><br><span class="line">    enable: true</span><br><span class="line">    since: 2022</span><br><span class="line">  custom_text:</span><br><span class="line">  copyright: true # Copyright of theme and framework</span><br></pre></td></tr></table></figure>

<h3 id="社交信息设置"><a href="#社交信息设置" class="headerlink" title="社交信息设置"></a>社交信息设置</h3><p>在主题配置文件下进行设置</p>
<p>图标采用的是<a href="https://fontawesome.com.cn/faicons/">图标库 – Font Awesome 中文网</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">   fa fa-rss: https://github.com/Echo-7self || RSS链接</span><br><span class="line">   fab fa-github: https://github.com/Echo-7self || Github</span><br><span class="line">   fab fa-qq: tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=xxxxxxx&amp;website=www.oicqzone.com || QQ</span><br><span class="line">  # fas fa-envelope: mailto:xxxxxx@gmail.com || Email</span><br></pre></td></tr></table></figure>

<p>QQ:下方添加对应的qq号码即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=xxxxxxx&amp;website=www.oicqzone.com</span><br></pre></td></tr></table></figure>

<p>注意：QQ前面是<strong>fab fa-qq</strong>，如果少了b，可能图标显示不出来</p>
<h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>首先，需要安装插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中加上如下代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  preload: true</span><br><span class="line">  CDN:</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; # 如果没有查到内容相关内容显示</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>butterfly</category>
      </categories>
      <tags>
        <tag>butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery_day01</title>
    <url>/2022/11/30/jquery-day01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>获取元素固有的属性值：prop(),</p>
<p>设置元素属性prop(属性，属性值)</p>
<p>获取元素自定义的属性值：attr()</p>
]]></content>
      <categories>
        <category>jquery</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode</title>
    <url>/2022/12/04/LeetCode/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h5 id="1-FizzBuzz"><a href="#1-FizzBuzz" class="headerlink" title="1.FizzBuzz"></a>1.FizzBuzz</h5><p>题目：<img src="C:\Users\19314\AppData\Roaming\Typora\typora-user-images\image-20221204131345663.png" alt="image-20221204131345663"></p>
<p><img src="C:\Users\19314\AppData\Roaming\Typora\typora-user-images\image-20221204132120430.png" alt="image-20221204132120430"></p>
<p>步骤：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var FizzBuzz = function (n)&#123;</span><br><span class="line">    var m = [];</span><br><span class="line">    for(var i = 0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        var q = i+1;</span><br><span class="line">        if(q%3==0&amp;&amp;q%5==0)&#123;</span><br><span class="line">            m[i] = &#x27;FizzBuzz&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">         else if(q%3==0)&#123;</span><br><span class="line">            m[i] = &#x27;Fizz&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">         else if(q%5==0)</span><br><span class="line">         &#123;</span><br><span class="line">            m[i] = &#x27;Buzz&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">         else</span><br><span class="line">         m[i] = String(q)</span><br><span class="line">    &#125;</span><br><span class="line">    return m</span><br><span class="line">&#125;</span><br><span class="line">console.log(FizzBuzz(15));</span><br></pre></td></tr></table></figure>

<h5 id="2-数组中重复的数字"><a href="#2-数组中重复的数字" class="headerlink" title="2.数组中重复的数字"></a>2.数组中重复的数字</h5><p>题目：</p>
<p><img src="C:\Users\19314\AppData\Roaming\Typora\typora-user-images\image-20221204213831465.png" alt="image-20221204213831465"></p>
<p>步骤：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var findRepeatNumber = function (nums) &#123;</span><br><span class="line">  var num = new Set();</span><br><span class="line">  for(const s of nums)</span><br><span class="line">  &#123;  </span><br><span class="line">      if(num.has(s))</span><br><span class="line">      return s;</span><br><span class="line">          num.add(s)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h5 id="3-替换字符"><a href="#3-替换字符" class="headerlink" title="3.替换字符"></a>3.替换字符</h5><p>题目：</p>
<p><img src="D:\myblog\source\img\study\替换空客.jpg"></p>
<p>步骤：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var replaceSpace = function(s) &#123;</span><br><span class="line">let c=&#x27;&#x27;;</span><br><span class="line">for(const x of s)&#123;</span><br><span class="line">    if(x!=&#x27; &#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">     c=c+x;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        c=c+&#x27;%20&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="4-从尾到头打印链表"><a href="#4-从尾到头打印链表" class="headerlink" title="4.从尾到头打印链表"></a>4.从尾到头打印链表</h5><p>题目：</p>
<p><img src="D:\myblog\source\img\study\从尾到头打印链表.jpg"></p>
<p>步骤：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var reversePrint = function(head) &#123;</span><br><span class="line">    if(!head)</span><br><span class="line">    return[];</span><br><span class="line">    var arr=[];</span><br><span class="line">    while(head)</span><br><span class="line">    &#123;</span><br><span class="line">        arr.push(head.val);</span><br><span class="line">        head=head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="5-两个栈实现队列"><a href="#5-两个栈实现队列" class="headerlink" title="5.两个栈实现队列"></a>5.两个栈实现队列</h5><p><img src="https://s1.vika.cn/space/2023/02/11/5c9126ed9cbf4c98bcebe6280bdb0b58"></p>
<p>步骤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CQueue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">stack1</span> = []</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">stack2</span> = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">appendTail</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="title function_">push</span>(value)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">deleteHead</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//出队列</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="title function_">pop</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//进队列</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="title function_">pop</span>())       </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="title function_">pop</span>()||-<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="6-旋转数组中的最小值"><a href="#6-旋转数组中的最小值" class="headerlink" title="6.旋转数组中的最小值"></a>6.旋转数组中的最小值</h5><p>题目</p>
<p><img src="https://s1.vika.cn/space/2023/02/12/7bdc596be7c8474eb7473ad0dd1d3729"></p>
<p>步骤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">numbers</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//二分查找</span></span><br><span class="line"><span class="keyword">var</span> minArray = <span class="keyword">function</span> (<span class="params">numbers</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> hight = numbers.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> mid</span><br><span class="line">    <span class="keyword">while</span> (low &lt; hight) &#123;</span><br><span class="line">         mid = low + <span class="title class_">Math</span>.<span class="title function_">floor</span>((hight - low) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (numbers[mid] &lt; numbers[hight]) &#123;</span><br><span class="line">            hight = mid </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (numbers[mid] &gt; numbers[hight]) &#123;</span><br><span class="line">            low = mid +<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            hight--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> numbers[low]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="7-青蛙跳台阶"><a href="#7-青蛙跳台阶" class="headerlink" title="7.青蛙跳台阶"></a>7.青蛙跳台阶</h5><p>问题</p>
<p><img src="https://s1.vika.cn/space/2023/02/13/56e1050c61604428948ca560639572da"></p>
<p>步骤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numWays = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> n0 = <span class="number">0</span></span><br><span class="line">     <span class="keyword">let</span> n1 = <span class="number">1</span></span><br><span class="line">     <span class="keyword">let</span> n2 = <span class="number">2</span></span><br><span class="line">     <span class="keyword">let</span> mod = <span class="number">1000000007</span></span><br><span class="line">    <span class="comment">//等于0时</span></span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment">//小于等于2时</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;<span class="keyword">return</span> n&#125;</span><br><span class="line">    <span class="comment">//大于2时</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        n0 = n1 + n2</span><br><span class="line">        n1 = n2</span><br><span class="line">        n2 = n0%mod</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="8-斐波那契数列"><a href="#8-斐波那契数列" class="headerlink" title="8.斐波那契数列"></a>8.斐波那契数列</h5><p>问题</p>
<p><img src="https://s1.vika.cn/space/2023/02/13/d757829fda1749f29fd4a45b4b3b6e0e"></p>
<p>步骤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fib = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> t</span><br><span class="line">    <span class="keyword">let</span> mod = <span class="number">1000000007</span></span><br><span class="line">    <span class="keyword">let</span> t0 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> t1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        t = t0 + t1</span><br><span class="line">        t0 = t1</span><br><span class="line">        t1 = t % mod</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t1</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="9-二进制中1的个数"><a href="#9-二进制中1的个数" class="headerlink" title="9.二进制中1的个数"></a>9.二进制中1的个数</h5><p>题目</p>
<p><img src="https://s1.vika.cn/space/2023/02/14/289912817b6c4e6a8169f76d2979a596"></p>
<p>步骤</p>
<p>方法一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span> - a positive integer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingWeight = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">n = n.<span class="title function_">toString</span>(<span class="number">2</span>).<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(v <span class="keyword">of</span> n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v==<span class="number">1</span>)&#123;</span><br><span class="line">        i++</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> i</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span> - a positive integer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingWeight = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">//循环二进制检查</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;      <span class="comment">//if((n&amp;(1&lt;&lt;i))!=0)&#123;num++&#125;</span></span><br><span class="line">         num++                    <span class="comment">//注意位运算符与==，!=的优先级</span></span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="10-打印从1到最大的n位数"><a href="#10-打印从1到最大的n位数" class="headerlink" title="10 打印从1到最大的n位数"></a>10 打印从1到最大的n位数</h5><p>题目</p>
<p><img src="https://s1.vika.cn/space/2023/02/15/45aee221bdba4282b31bbe098d6e1a42"></p>
<p>步骤</p>
<p>方法一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> printNumbers = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> num =<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> str = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    num *=<span class="number">10</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;num-<span class="number">1</span>;j++)&#123;</span><br><span class="line">str.<span class="title function_">push</span>(j+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> printNumbers = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="title class_">Array</span>((<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>,n)-<span class="number">1</span>))</span><br><span class="line"><span class="keyword">let</span> str = num.<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">    value = index +<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="11-删除链表的节点"><a href="#11-删除链表的节点" class="headerlink" title="11.删除链表的节点"></a>11.删除链表的节点</h5><p>问题</p>
<p><img src="https://s1.vika.cn/space/2023/02/16/774c805101054007a063c55ead367fcd"></p>
<p>步骤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deleteNode = <span class="keyword">function</span> (<span class="params">head, val</span>) &#123;</span><br><span class="line">  <span class="comment">//双指针</span></span><br><span class="line">  <span class="keyword">let</span> pre = head</span><br><span class="line">  <span class="keyword">let</span> i = head.<span class="property">next</span></span><br><span class="line"><span class="comment">//   console.log(pre.val)</span></span><br><span class="line"><span class="keyword">if</span>(pre.<span class="property">val</span>==val) <span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">while</span>(pre!=<span class="literal">null</span>&amp;&amp;pre.<span class="property">next</span>!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i.<span class="property">val</span>==val)&#123;</span><br><span class="line">        pre.<span class="property">next</span> = i.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    pre = pre.<span class="property">next</span></span><br><span class="line">    i=i.<span class="property">next</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="12-调整数组顺序使奇数位于偶数前面"><a href="#12-调整数组顺序使奇数位于偶数前面" class="headerlink" title="12.调整数组顺序使奇数位于偶数前面"></a>12.调整数组顺序使奇数位于偶数前面</h5><p>问题</p>
<p><img src="https://s1.vika.cn/space/2023/02/17/18c1ed5f751b457e937559e3d185cde6"></p>
<p>步骤：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> exchange = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">    <span class="keyword">let</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">    <span class="keyword">for</span> (v <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v % <span class="number">2</span>===<span class="number">1</span>) &#123;</span><br><span class="line">             arr.<span class="title function_">push</span>(v)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            arr1.<span class="title function_">push</span>(v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = [...arr,...arr1]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_day01</title>
    <url>/2022/12/14/linux-day-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="Linux基础知识"><a href="#Linux基础知识" class="headerlink" title="Linux基础知识"></a>Linux基础知识</h4><p>命令行：即<strong>Linux终端</strong>，是命令提示符页面。以纯字符的形式操作系统，可以使用字符化命令对系统发出指令。</p>
<p>命令：即<strong>Linux程序</strong>。一个命令就是一个Linux程序；命令没有图形化页面，可以在命令行（终端中）提供字符化的反馈。</p>
<p>绝对路径：以<strong>根目录为起点</strong>，描述路径的一种写法，路径描述以&#x2F;开头</p>
<p>相对路径：以<strong>当前路径为起点</strong>，描述路径的一种写法，路径无需以&#x2F;开头</p>
<h4 id="Linux命令基础格式"><a href="#Linux命令基础格式" class="headerlink" title="Linux命令基础格式"></a>Linux命令基础格式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">command [-options] [parameter]</span><br></pre></td></tr></table></figure>

<ul>
<li>command：命令本身</li>
<li>-options：[可选，非必填]命令 的一些选项，可以通过选项控制命令的行为细节</li>
<li>parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等</li>
</ul>
<h5 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h5><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ls [-a -l -h] [Linux路径]</span><br></pre></td></tr></table></figure>

<ul>
<li>-a选项，表示：all,列出全部文件（包含隐藏文件&#x2F;文件夹）<ul>
<li>以**.<strong>开头的，表示Linux系统的隐藏文件&#x2F;文件夹（只要以</strong>.**开头，就能自动隐藏）</li>
</ul>
</li>
<li>-l选项，表示：以列表（竖向排列）的形式展示内容，并展示更多的信息</li>
<li>-h选项，表示易于阅读的形式，列出文件大小，如K、G、M<ul>
<li>-h<strong>必须</strong>搭配 <strong>- l</strong>一起使用</li>
</ul>
</li>
</ul>
<h5 id="cd切换工作目录"><a href="#cd切换工作目录" class="headerlink" title="cd切换工作目录"></a>cd切换工作目录</h5><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cd [Linux路径]</span><br></pre></td></tr></table></figure>

<ul>
<li>cd命令无需选项，只有参数，表示要切换到哪个目录下</li>
<li>cd命令直接执行，不写参数，表示回到用户的HOME目录</li>
</ul>
<h5 id="pwd查看当前工作目录"><a href="#pwd查看当前工作目录" class="headerlink" title="pwd查看当前工作目录"></a>pwd查看当前工作目录</h5><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>

<ul>
<li>pwd命令，无选项，直接输入pwd即可</li>
</ul>
<h5 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h5><ul>
<li>**.**表示当前目录</li>
<li>**..**表示上一级目录</li>
<li>**~**表示HOME目录</li>
</ul>
<h5 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h5><p>通过mkdir命令可以创建新的目录（文件夹）</p>
<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mkdir [-p] Linux路径</span><br></pre></td></tr></table></figure>

<ul>
<li>参数必填，表示Linux路径，即要创建的文件的路径，相对路径或绝对路径均可</li>
<li>-p选项可选，表示自动创建不存在的父目录，使用于创建连续多层级的目录</li>
</ul>
<p><strong>注意</strong>：创建文件夹需要修改权限，请确保操作均在HOME目录内，不要再HOME外操作涉及到权限问题，HOME外无法成功，后续会学习权限管控的知识。</p>
<h5 id="文件操作命令part1（touch、cat、more）"><a href="#文件操作命令part1（touch、cat、more）" class="headerlink" title="文件操作命令part1（touch、cat、more）"></a>文件操作命令part1（touch、cat、more）</h5><h6 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">touch Linux路径</span><br></pre></td></tr></table></figure>

<ul>
<li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径均可以使用</li>
</ul>
<h6 id="cat查看文件内容"><a href="#cat查看文件内容" class="headerlink" title="cat查看文件内容"></a>cat查看文件内容</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cat Linux路径</span><br></pre></td></tr></table></figure>

<ul>
<li>cat同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径均可以使用</li>
</ul>
<h6 id="more查看文件内容"><a href="#more查看文件内容" class="headerlink" title="more查看文件内容"></a>more查看文件内容</h6><p>more命令同样可以查看文件内容，同cat不同的使：</p>
<ul>
<li>cat是直接将内容全部展示出来</li>
<li>more支持翻页，如果文件内容过多，可以一页页的展示</li>
</ul>
<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">more Linux路径</span><br></pre></td></tr></table></figure>

<ul>
<li>同样没有选项，只有参数，参数表示：被查看的文件路径，相对、绝对、特殊路径均可以使用</li>
<li>在查看的过程中，通过空格翻页</li>
<li>通过q退出查看</li>
</ul>
<h5 id="文件操作命令（cp-mv-rm）"><a href="#文件操作命令（cp-mv-rm）" class="headerlink" title="文件操作命令（cp,mv,rm）"></a>文件操作命令（cp,mv,rm）</h5><h6 id="cp复制文件-x2F-文件夹"><a href="#cp复制文件-x2F-文件夹" class="headerlink" title="cp复制文件&#x2F;文件夹"></a>cp复制文件&#x2F;文件夹</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cp [-r] 参数1 参数2</span><br></pre></td></tr></table></figure>

<ul>
<li>-r选项，可选，用于复制文件夹使用，表示递归</li>
<li>参数1，Linux路径，表示被复制的文件夹</li>
<li>参数2，Linux路径，表示要复制去的地方</li>
</ul>
<h6 id="mv移动文件-x2F-文件夹"><a href="#mv移动文件-x2F-文件夹" class="headerlink" title="mv移动文件&#x2F;文件夹"></a>mv移动文件&#x2F;文件夹</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mv 参数1 参数2</span><br></pre></td></tr></table></figure>

<ul>
<li>参数1，Linux路径，表示要移动的文件或文件夹</li>
<li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保命令存在</li>
</ul>
<h6 id="rm删除文件-x2F-文件夹"><a href="#rm删除文件-x2F-文件夹" class="headerlink" title="rm删除文件&#x2F;文件夹"></a>rm删除文件&#x2F;文件夹</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">rm [-r -f] 参数1 参数2 ...... 参数N</span><br></pre></td></tr></table></figure>

<ul>
<li>-r选项用于删除文件夹</li>
<li>-f表示force，强制删除（不会弹出提示确认消息）<ul>
<li>普通用户删除内容不会弹出提示，只有root管理用户删除内容会有提示</li>
<li>所以一般普通用户用不到-f选项</li>
</ul>
</li>
<li>参数1、参数2、……、参数N表示要删除的文件或文件夹路径，按照空格隔开</li>
</ul>
<p>rm命令支持通配符*，用来做模糊匹配</p>
<ul>
<li>符号*****表示通配符，即匹配任意内容（包含空），实例:<ul>
<li>test*,表示匹配任何以test开头的内容</li>
<li>*test,表示匹配任何以test结尾的内容</li>
<li><em><strong><strong>test</strong></strong></em>,表示匹配任何包含test的内容</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js_day02</title>
    <url>/2022/12/25/node-js-day02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="Node-js中的的模块化"><a href="#Node-js中的的模块化" class="headerlink" title="Node.js中的的模块化"></a>Node.js中的的模块化</h3><h4 id="Node-js-中模块的分类"><a href="#Node-js-中模块的分类" class="headerlink" title="Node.js 中模块的分类"></a>Node.js 中模块的分类</h4><p>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是</p>
<ul>
<li>内置模块（内置模块是由 <code>Node.js</code> 官方提供的，例如 <code>fs、path、http</code> 等）</li>
<li>自定义模块（用户创建的每个 .js 文件，都是自定义模块）</li>
<li>第三方模块（由第三方模块开发出来）</li>
</ul>
<h4 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h4><p>使用强大的 require() 方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//加载内置模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">//加载用户自定义的模块</span><br><span class="line">const custom = require(./custom.js)</span><br><span class="line">//加载第三方模块</span><br><span class="line">const moment = require(&#x27;moment&#x27;)</span><br></pre></td></tr></table></figure>

<p>注意：使用 require() 方法加载其它模块时，会执行被加载模块中的代码</p>
<h4 id="Node-js中的模块作用域"><a href="#Node-js中的模块作用域" class="headerlink" title="Node.js中的模块作用域"></a><code>Node.js</code>中的模块作用域</h4><p>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域</p>
<h4 id="模块作用域的好处"><a href="#模块作用域的好处" class="headerlink" title="模块作用域的好处"></a>模块作用域的好处</h4><p>防止了全局变量污染的问题</p>
<h4 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h4><p>在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息</p>
<h4 id="module-exports-对象"><a href="#module-exports-对象" class="headerlink" title="module.exports 对象"></a>module.exports 对象</h4><p>在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。 外界用 require() 方法导入自定义模块时，得到的就是 module.exports 所指向的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10自定义模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">username</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayhello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">nickname</span>:<span class="string">&#x27;小白&#x27;</span>,</span><br><span class="line">    <span class="title function_">sayhi</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./10自定义模块&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="comment">//输出结果是 &#123; nickname: &#x27;小白&#x27;, sayhi: [Function: sayhi] &#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="exports-对象"><a href="#exports-对象" class="headerlink" title="exports 对象"></a>exports 对象</h4><p>由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况 下，exports 和 module.exports 指向同一个对象。最终共享的结果，还是以 module.exports 指向的对象为准。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 12exports模块</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">username</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayhello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m =<span class="built_in">require</span>(<span class="string">&#x27;./12exports.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="comment">//输出结果是 &#123; username: &#x27;zs&#x27;, sayhello: [Function (anonymous)] &#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="共享成员时的注意点"><a href="#共享成员时的注意点" class="headerlink" title="共享成员时的注意点"></a>共享成员时的注意点</h4><p>使用 require() 方法导入模块时，导入的结果，永远以 module.exports 指向的对象为准</p>
<h4 id="exports-和-module-exports-的使用误区"><a href="#exports-和-module-exports-的使用误区" class="headerlink" title="exports 和 module.exports 的使用误区"></a>exports 和 module.exports 的使用误区</h4><p>时刻谨记，require() 模块时，得到的永远是 module.exports 指向的对象</p>
<img src="https://s1.vika.cn/space/2022/12/25/4329885010f1491c81ae80f2231ae810"  />

<p><strong>注意</strong>：为了防止混乱，建议大家不要在同一个模块中同时使用 exports 和 module.exports</p>
<h4 id="Node-js-中的模块化规范"><a href="#Node-js-中的模块化规范" class="headerlink" title="Node.js 中的模块化规范"></a>Node.js 中的模块化规范</h4><p>Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖。</p>
<p>CommonJS 规定：</p>
<ol>
<li>每个模块内部，module 变量代表<strong>当前模块</strong>。</li>
<li>module 变量是一个对象，它的 exports 属性（即 module.exports）<strong>是对外的接口</strong>。</li>
<li>加载某个模块，其实是加载该模块的 module.exports 属性。<strong>require() 方法用于加载模块</strong></li>
</ol>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>js高级</title>
    <url>/2023/02/02/js/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="JavaScript-基础-第1天"><a href="#JavaScript-基础-第1天" class="headerlink" title="JavaScript 基础 - 第1天"></a>JavaScript 基础 - 第1天</h1><blockquote>
<p>了解变量、数据类型、运算符等基础概念，能够实现数据类型的转换，结合四则运算体会如何编程。</p>
</blockquote>
<ul>
<li>体会现实世界中的事物与计算机的关系</li>
<li>理解什么是数据并知道数据的分类</li>
<li>理解变量存储数据的“容器”</li>
<li>掌握常见运算符的使用，了解优先级关系</li>
<li>知道 JavaScript 数据类型隐式转换的特征</li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>掌握 JavaScript 的引入方式，初步认识 JavaScript 的作用</p>
</blockquote>
<h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p>
<h4 id="内部方式"><a href="#内部方式" class="headerlink" title="内部方式"></a>内部方式</h4><p>通过 <code>script</code> 标签包裹 JavaScript 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="外部形式"><a href="#外部形式" class="headerlink" title="外部形式"></a>外部形式</h4><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 script 标签使用 src 属性引入了某 .js 文件，那么 标签的代码会被忽略！！！如下代码所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处的代码会被忽略掉！！！！</span></span></span><br><span class="line"><span class="language-javascript">  	<span class="title function_">alert</span>(<span class="number">666</span>);  </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注释和结束符"><a href="#注释和结束符" class="headerlink" title="注释和结束符"></a>注释和结束符</h3><p>通过注释可以屏蔽代码被执行或者添加备注信息，JavaScript 支持两种形式注释语法：</p>
<h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>使用 <code>// </code> 注释单行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这种是单行注释的语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次只能注释一行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复注释</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>使用 <code>/* */</code> 注释多行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 这种的是多行注释的语法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	更常见的多行注释是这种写法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	在些可以任意换行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	多少行都可以</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：编辑器中单行注释的快捷键为 <code>ctrl + /</code></strong></p>
<h3 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h3><p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用回车（enter）替代。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 结束符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line">    alert(1);</span><br><span class="line">    alert(2);</span><br><span class="line">    alert(1)</span><br><span class="line">    alert(2)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p>
<h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p>
<p>举例说明：如按键盘上的方向键，向上&#x2F;下键可以滚动页面，按向上&#x2F;下键这个动作叫作输入，页面发生了滚动了这便叫输出。</p>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>JavaScript 可以接收用户的输入，然后再将输入的结果输出：</p>
<p><code>alert()</code>、<code>document.wirte()</code></p>
<p>以数字为例，向 <code>alert()</code> 或 <code>document.write()</code>输入任意数字，他都会以弹窗形式展示（输出）给用户。</p>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 输入输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 输入的任意数字，都会以弹窗形式展示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;要输出的内容&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 以弹窗形式提示用户输入姓名，注意这里的文字使用英文的引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote>
<p>理解变量是计算机存储数据的“容器”，掌握变量的声明方式</p>
</blockquote>
<p>变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆，通俗的理解变量就是使用【某个符号】来代表【某个具体的数值】（数据）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// x 符号代表了 5 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  x = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// y 符号代表了 6 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  y = <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//举例： 在 JavaScript 中使用变量可以将某个数据（数值）记录下来！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 将用户输入的内容保存在 num 这个变量（容器）中</span></span></span><br><span class="line"><span class="language-javascript">  num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一数字!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过 num 变量（容器）将用户输入的内容输出出来</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(num)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(num)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 变量名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关键字是 JavaScript 中内置的一些英文词汇（单词或缩写），它们代表某些特定的含义，如 <code>let</code> 的含义是声明变量的，看到 <code>let</code>  后就可想到这行代码的意思是在声明变量，如 <code>let age;</code> </p>
<p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，推荐使用 <code>let</code> 声明变量！！！</p>
<h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 赋值，将 18 这个数据存入了 age 这个“容器”中</span></span></span><br><span class="line"><span class="language-javascript">    age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这样 age 的值就成了 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(age)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 也可以声明和赋值同时进行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(str);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>JavaScript 使用专门的关键字 <code>let</code> 和 <code>var</code> 来声明（定义）变量，在使用时需要注意一些细节：</p>
<p>以下是使用 <code>let</code> 时的注意事项：</p>
<ol>
<li>允许声明和赋值同时进行</li>
<li>不允许重复声明</li>
<li>允许同时声明多个变量并赋值</li>
<li>JavaScript 中内置的一些关键字不能被当做变量名</li>
</ol>
<p>以下是使用 <code>var</code> 时的注意事项：</p>
<ol start="2">
<li>允许声明和赋值同时进行</li>
<li>允许重复声明</li>
<li>允许同时声明多个变量并赋值</li>
</ol>
<p>大部分情况使用 <code>let</code> 和 <code>var</code> 区别不大，但是 <code>let</code> 相较 <code>var</code> 更严谨，因此推荐使用 <code>let</code>，后期会更进一步介绍二者间的区别。</p>
<h3 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h3><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p>
<ol>
<li>只能是字母、数字、下划线、$，且不能能数字开头</li>
<li>字母区分大小写，如 Age 和 age 是不同的变量</li>
<li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li>
<li>尽量保证变量具有一定的语义，见字知义</li>
</ol>
<p>注：所谓关键字是指 JavaScript 内部使用的词语，如 <code>let</code> 和<code>var</code>，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 变量名命名规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age1 = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> _age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 1age = 18; // 错误，不可以数字开头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> $age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title class_">Age</span> = <span class="number">24</span> <span class="comment">// 正确，它与小写的 age 是不同的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let let = 18; // 错误，let 是关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> int = <span class="number">123</span> <span class="comment">// 不推荐，int 是保留字</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>概念：使用 const 声明的变量称为“常量”。</p>
<p>使用场景：当某个变量永远不会改变的时候，就可以使用 const 来声明，而不是let。</p>
<p>命名规范：和变量一致</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）</p>
</blockquote>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote>
<p>计算机世界中的万事成物都是数据。</p>
</blockquote>
<p>计算机程序可以处理大量的数据，为了方便数据的管理，将数据分成了不同的类型：</p>
<p>注：通过 typeof 关键字检测数据类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测 1 是什么类型数据，结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>即我们数学中学习到的数字，可以是整数、小数、正数、负数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> score = <span class="number">100</span> <span class="comment">// 正整数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> price = <span class="number">12.345</span> <span class="comment">// 小数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> temperature = -<span class="number">40</span> <span class="comment">// 负数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> score) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> price) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> temperature) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等。</p>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>通过单引号（ <code>&#39;&#39;</code>） 、双引号（ <code>&quot;&quot;</code>）或反引号包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</p>
<p>注意事项：</p>
<ol>
<li>无论单引号或是双引号必须成对使用</li>
<li>单引号&#x2F;双引号可以互相嵌套，但是不以自已嵌套自已</li>
<li>必要时可以使用转义符 <code>\</code>，输出单引号或双引号</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user_name = <span class="string">&#x27;小明&#x27;</span> <span class="comment">// 使用单引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> gender = <span class="string">&quot;男&quot;</span> <span class="comment">// 使用双引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 看上去是数字，但是用引号包裹了就成了字符串了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str1 = <span class="string">&#x27;&#x27;</span> <span class="comment">// 这种情况叫空字符串</span></span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> user_name) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> gender) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> str) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 <code>true</code> 和 <code>false</code>，表示肯定的数据用 <code>true</code>，表示否定的数据用 <code>false</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  pink老师帅不帅？回答 是 或 否</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> isCool = <span class="literal">true</span> <span class="comment">// 是的，摔死了！</span></span></span><br><span class="line"><span class="language-javascript">    isCool = <span class="literal">false</span> <span class="comment">// 不，套马杆的汉子！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> isCool) <span class="comment">// 结果为 boolean</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只声明了变量，并末赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tmp;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> tmp) <span class="comment">// 结果为 undefined</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：JavaScript 中变量的值决定了变量的数据类型。</strong></p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><blockquote>
<p>理解弱类型语言的特征，掌握显式类型转换的方法</p>
</blockquote>
<p>在 JavaScript 中数据被分成了不同的类型，如数值、字符串、布尔值、undefined，在实际编程的过程中，不同数据类型之间存在着转换的关系。</p>
<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">13</span> <span class="comment">// 数值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num2 = <span class="string">&#x27;2&#x27;</span> <span class="comment">// 字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 132</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后 + 将两个字符串拼接到了一起</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 11</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后数值 13 减去 数值 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num - num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="title function_">prompt</span>(<span class="string">&#x27;请再输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：数据类型的隐式转换是 JavaScript 的特征，后续学习中还会遇到，目前先需要理解什么是隐式转换。</p>
<p>补充介绍模板字符串的拼接的使用</p>
<h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><p>编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p>
<h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>通过 <code>Number</code> 显示转换成数值类型，当转换失败时结果为 <code>NaN</code>（Not a Number）即不是一个数字。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> t = <span class="string">&#x27;12&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> f = <span class="number">8</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显式将字符串 12 转换成数值 12</span></span></span><br><span class="line"><span class="language-javascript">    t = <span class="title class_">Number</span>(t)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测转换后的类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof t);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t + f) <span class="comment">// 结果为 20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并不是所有的值都可以被转成数值类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将 hello 转成数值是不现实的，当无法转换成</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数值时，得到的结果为 NaN （Not a Number）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h4><p>只保留整数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;12px&#x27;</span>)) <span class="comment">//12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;12.34px&#x27;</span>)) <span class="comment">//12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;12px&#x27;</span>))  <span class="comment">//12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;12px&#x27;</span>))  <span class="comment">//12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;12.34px&#x27;</span>))  <span class="comment">//12.34</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;12.94px&#x27;</span>))  <span class="comment">//12.94</span></span><br></pre></td></tr></table></figure>



<h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h4><p>可以保留小数</p>
<h1 id="JavaScript-基础-第2天"><a href="#JavaScript-基础-第2天" class="headerlink" title="JavaScript 基础 - 第2天"></a>JavaScript 基础 - 第2天</h1><blockquote>
<p>理解什么是流程控制，知道条件控制的种类并掌握其对应的语法规则，具备利用循环编写简易ATM取款机程序能力</p>
</blockquote>
<ul>
<li>运算符</li>
<li>语句</li>
<li>综合案例</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>数字是用来计算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、减法 - 等等，所以经常和算术运算符一起。</p>
<p>算术运算符：也叫数学运算符，主要包括加、减、乘、除、取余（求模）等</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>求和</td>
</tr>
<tr>
<td>-</td>
<td>求差</td>
</tr>
<tr>
<td>*</td>
<td>求积</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>求商</td>
</tr>
<tr>
<td><strong>%</strong></td>
<td>取模（取余数），开发中经常用于作为某个数字是否被整除</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：在计算失败时，显示的结果是 NaN （not a number）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 算术运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> / <span class="number">2</span>) <span class="comment">//  4 </span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="number">10</span>)  <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + num)  <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 取模(取余数)  使用场景：  用来判断某个数是否能够被整除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> % <span class="number">2</span>) <span class="comment">//  0  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span> % <span class="number">3</span>) <span class="comment">//  0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> % <span class="number">3</span>) <span class="comment">//  2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> % <span class="number">5</span>) <span class="comment">//  3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 注意事项 : 如果我们计算失败，则返回的结果是 NaN (not a number)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> - <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> * <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + <span class="number">2</span>)   <span class="comment">// pink老师2</span></span><br></pre></td></tr></table></figure>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符：对变量进行赋值的运算符</p>
<p> &#x3D;     将等号右边的值赋予给左边, 要求左边必须是一个容器</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>+&#x3D;</td>
<td>加法赋值</td>
</tr>
<tr>
<td>-+</td>
<td>减法赋值</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>乘法赋值</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>除法赋值</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>取余赋值</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="comment">// num = num + 1</span></span><br><span class="line"><span class="comment">// 采取赋值运算符</span></span><br><span class="line"><span class="comment">// num += 1</span></span><br><span class="line">num += <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="自增-x2F-自减运算符"><a href="#自增-x2F-自减运算符" class="headerlink" title="自增&#x2F;自减运算符"></a>自增&#x2F;自减运算符</h3><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>++</td>
<td>自增</td>
<td>变量自身的值加1，例如: x++</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>变量自身的值减1，例如: x–</td>
</tr>
</tbody></table>
<ol>
<li>++在前和++在后在单独使用时二者并没有差别，而且一般开发中我们都是独立使用</li>
<li>++在后（后缀式）我们会使用更多</li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>只有变量能够使用自增和自减运算符</li>
<li>++、– 可以在变量前面也可以在变量后面，比如: x++  或者  ++x</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let num = 10</span></span><br><span class="line">    <span class="comment">// num = num + 1</span></span><br><span class="line">    <span class="comment">// num += 1</span></span><br><span class="line">    <span class="comment">// // 1. 前置自增</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// ++i</span></span><br><span class="line">    <span class="comment">// console.log(i)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// console.log(++i + 1)</span></span><br><span class="line">    <span class="comment">// 2. 后置自增</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// i++</span></span><br><span class="line">    <span class="comment">// console.log(i)</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// console.log(i++ + 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 了解 </span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i++ + ++i + i)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>使用场景：比较两个数据大小、是否相等，根据比较结果返回一个布尔值（true &#x2F; false）</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>左边是否大于右边</td>
</tr>
<tr>
<td>&lt;</td>
<td>左边是否小于右边</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>左边是否大于或等于右边</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>左边是否小于或等于右边</td>
</tr>
<tr>
<td>&#x3D;&#x3D;&#x3D;</td>
<td>左右两边是否<code>类型</code>和<code>值</code>都相等（重点）</td>
</tr>
<tr>
<td>&#x3D;&#x3D;</td>
<td>左右两边<code>值</code>是否相等</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>左右值不相等</td>
</tr>
<tr>
<td>!&#x3D;&#x3D;</td>
<td>左右两边是否不全等</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// 比较运算符有隐式转换 把&#x27;2&#x27; 转换为 2  双等号 只判断值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="string">&#x27;2&#x27;</span>)  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// console.log(undefined === null)</span></span><br><span class="line">  <span class="comment">// === 全等 判断 值 和 数据类型都一样才行</span></span><br><span class="line">  <span class="comment">// 以后判断是否相等 请用 ===  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// NaN 不等于任何人，包括他自己</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> !== <span class="string">&#x27;2&#x27;</span>)  <span class="comment">// true  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> != <span class="string">&#x27;2&#x27;</span>) <span class="comment">// false </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span> &lt; <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span> &lt; <span class="string">&#x27;aac&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>使用场景：可以把多个布尔值放到一起运算，最终返回一个布尔值</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>名称</th>
<th>日常读法</th>
<th>特点</th>
<th>口诀</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>并且</td>
<td>符号两边有一个假的结果为假</td>
<td>一假则假</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或</td>
<td>或者</td>
<td>符号两边有一个真的结果为真</td>
<td>一真则真</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
<td>取反</td>
<td>true变false  false变true</td>
<td>真变假，假变真</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>A &amp;&amp; B</th>
<th>A || B</th>
<th>!A</th>
</tr>
</thead>
<tbody><tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 逻辑与 一假则假</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &lt; <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">    <span class="comment">// 逻辑或 一真则真</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">false</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">    <span class="comment">// 逻辑非  取反</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">6</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num &gt; <span class="number">5</span> &amp;&amp; num &lt; <span class="number">10</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p> <img src="D:/2023%E8%A7%86%E9%A2%91/javascript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E5%A4%A9/02-%E7%AC%94%E8%AE%B0/assets/1671016521031.png" alt="67101652103"></p>
<blockquote>
<p>逻辑运算符优先级： ！&gt; &amp;&amp; &gt;  ||  </p>
</blockquote>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h3><p><img src="C:\Users\19314\Desktop\JavaScript基础笔记和作业\JavaScript基础第二天\03-笔记\assets\1671017924981.png" alt="67101792498"></p>
<h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><p>分支语句可以根据条件判定真假，来选择性的执行想要的代码</p>
<p>分支语句包含：</p>
<ol>
<li>if分支语句（重点）</li>
<li>三元运算符</li>
<li>switch语句</li>
</ol>
<h4 id="if-分支语句"><a href="#if-分支语句" class="headerlink" title="if 分支语句"></a>if 分支语句</h4><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 满足条件要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小括号内的条件结果是布尔值，为 true 时，进入大括号里执行代码；为false，则不执行大括号里面代码</p>
<p>小括号内的结果若不是布尔类型时，会发生类型转换为布尔值，类似Boolean()</p>
<p>如果大括号只有一个语句，大括号可以省略，但是，俺们不提倡这么做~</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 单分支语句</span></span><br><span class="line">    <span class="comment">// if (false) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (3 &gt; 5) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (2 === &#x27;2&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//  1. 除了0 所有的数字都为真</span></span><br><span class="line">    <span class="comment">//   if (0) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// 2.除了 &#x27;&#x27; 所有的字符串都为真 true</span></span><br><span class="line">    <span class="comment">// if (&#x27;pink老师&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (&#x27;&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// // if (&#x27;&#x27;) console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 用户输入</span></span><br><span class="line">    <span class="keyword">let</span> score = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入成绩&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 进行判断输出</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">700</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;恭喜考入黑马程序员&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="if双分支语句"><a href="#if双分支语句" class="headerlink" title="if双分支语句"></a>if双分支语句</h4><p>如果有两个条件的时候，可以使用 if else 双分支语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 满足条件要执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 不满足条件要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">// 1. 用户输入</span></span><br><span class="line">   <span class="keyword">let</span> uname = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line">   <span class="keyword">let</span> pwd = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line">   <span class="comment">// 2. 判断输出</span></span><br><span class="line">   <span class="keyword">if</span> (uname === <span class="string">&#x27;pink&#x27;</span> &amp;&amp; pwd === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;恭喜登录成功&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;用户名或者密码错误&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="if-多分支语句"><a href="#if-多分支语句" class="headerlink" title="if 多分支语句"></a>if 多分支语句</h4><p>使用场景： 适合于有多个条件的时候</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">// 1. 用户输入</span></span><br><span class="line">   <span class="keyword">let</span> score = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入成绩：&#x27;</span>)</span><br><span class="line">   <span class="comment">// 2. 判断输出</span></span><br><span class="line">   <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;成绩优秀，宝贝，你是我的骄傲&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;成绩良好，宝贝，你要加油哦~~&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;成绩及格，宝贝，你很危险~&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;成绩不及格，宝贝，我不想和你说话，我只想用鞭子和你说话~&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="三元运算符（三元表达式）"><a href="#三元运算符（三元表达式）" class="headerlink" title="三元运算符（三元表达式）"></a>三元运算符（三元表达式）</h4><p><strong>使用场景</strong>： 一些简单的双分支，可以使用  三元运算符（三元表达式），写起来比 if  else双分支 更简单</p>
<p><strong>符号</strong>：? 与 : 配合使用</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">条件 ? 表达式<span class="number">1</span> ： 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三元运算符（三元表达式）</span></span><br><span class="line"><span class="comment">// 1. 语法格式</span></span><br><span class="line"><span class="comment">// 条件 ? 表达式1 : 表达式2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 执行过程 </span></span><br><span class="line"><span class="comment">// 2.1 如果条件为真，则执行表达式1</span></span><br><span class="line"><span class="comment">// 2.2 如果条件为假，则执行表达式2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 验证</span></span><br><span class="line"><span class="comment">// 5 &gt; 3 ? &#x27;真的&#x27; : &#x27;假的&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt; <span class="number">3</span> ? <span class="string">&#x27;真的&#x27;</span> : <span class="string">&#x27;假的&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// let age = 18 </span></span><br><span class="line"><span class="comment">// age = age + 1</span></span><br><span class="line"><span class="comment">//  age++</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 用户输入 </span></span><br><span class="line"><span class="keyword">let</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入一个数字:&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 判断输出- 小于10才补0</span></span><br><span class="line"><span class="comment">// num = num &lt; 10 ? 0 + num : num</span></span><br><span class="line">num = num &gt;= <span class="number">10</span> ? num : <span class="number">0</span> + num</span><br><span class="line"><span class="title function_">alert</span>(num)</span><br></pre></td></tr></table></figure>

<h4 id="switch语句（了解）"><a href="#switch语句（了解）" class="headerlink" title="switch语句（了解）"></a>switch语句（了解）</h4><p>使用场景： 适合于有多个条件的时候，也属于分支语句，大部分情况下和 if多分支语句 功能相同</p>
<p>注意：</p>
<ol>
<li>switch case语句一般用于等值判断, if适合于区间判断</li>
<li>switchcase一般需要配合break关键字使用 没有break会造成case穿透</li>
<li>if 多分支语句开发要比switch更重要，使用也更多</li>
</ol>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch分支语句</span></span><br><span class="line"><span class="comment">// 1. 语法</span></span><br><span class="line"><span class="comment">// switch (表达式) &#123;</span></span><br><span class="line"><span class="comment">//   case 值1:</span></span><br><span class="line"><span class="comment">//     代码1</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   case 值2:</span></span><br><span class="line"><span class="comment">//     代码2</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"><span class="comment">//   ...</span></span><br><span class="line"><span class="comment">//   default:</span></span><br><span class="line"><span class="comment">//     代码n</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是1&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是2&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是3&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有符合条件的&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h4><p><strong>作用：</strong>学习时可以帮助更好的理解代码运行，工作时可以更快找到bug</p>
<p>浏览器打开调试界面</p>
<ol>
<li>按F12打开开发者工具</li>
<li>点到源代码一栏 （ sources ）</li>
<li>选择代码文件</li>
</ol>
<p><strong>断点：</strong>在某句代码上加的标记就叫断点，当程序执行到这句有标记的代码时会暂停下来</p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>使用场景：重复执行 指定的一段代码，比如我们想要输出10次 ‘我学的很棒’</p>
<p>学习路径：</p>
<p>1.while循环</p>
<p>2.for 循环（重点）</p>
<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while :  在…. 期间， 所以 while循环 就是在满足条件期间，重复执行某些代码。</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">   <span class="comment">// 循环体    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// while循环: 重复执行代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 需求: 利用循环重复打印3次 &#x27;月薪过万不是梦，毕业时候见英雄&#x27;</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;月薪过万不是梦，毕业时候见英雄~&lt;br&gt;&#x27;</span>)</span><br><span class="line">  i++   <span class="comment">// 这里千万不要忘了变量自增否则造成死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环三要素：</p>
<p>1.初始值 （经常用变量）</p>
<p>2.终止条件</p>
<p>3.变量的变化量</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// // 1. 变量的起始值</span></span><br><span class="line">  <span class="comment">// let i = 1</span></span><br><span class="line">  <span class="comment">// // 2. 终止条件</span></span><br><span class="line">  <span class="comment">// while (i &lt;= 3) &#123;</span></span><br><span class="line">  <span class="comment">//   document.write(&#x27;我要循环三次 &lt;br&gt;&#x27;)</span></span><br><span class="line">  <span class="comment">//   // 3. 变量的变化量</span></span><br><span class="line">  <span class="comment">//   i++</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 1. 变量的起始值</span></span><br><span class="line">  <span class="keyword">let</span> end = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入次数:&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="comment">// 2. 终止条件</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= end) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;我要循环三次 &lt;br&gt;&#x27;</span>)</span><br><span class="line">  <span class="comment">// 3. 变量的变化量</span></span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="中止循环"><a href="#中止循环" class="headerlink" title="中止循环"></a>中止循环</h4><p><code>break</code>   中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用（提高效率）  </p>
<p><code>continue</code>  中止本次循环，一般用于排除或者跳过某一个选项的时候</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// while (i &lt;= 5) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(i)</span></span><br><span class="line">    <span class="comment">//   if (i === 3) &#123;</span></span><br><span class="line">    <span class="comment">//     break  // 退出循环</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">//   i++</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">      i++</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><p>1.while(true) 来构造“无限”循环，需要使用break退出循环。（常用）</p>
<p>2.for(;;) 也可以来构造“无限”循环，同样需要使用break退出循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无限循环  </span></span><br><span class="line"><span class="comment">// 需求： 页面会一直弹窗询问你爱我吗？</span></span><br><span class="line"><span class="comment">// (1). 如果用户输入的是 &#x27;爱&#x27;，则退出弹窗</span></span><br><span class="line"><span class="comment">// (2). 否则一直弹窗询问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. while(true) 无限循环</span></span><br><span class="line"><span class="comment">// while (true) &#123;</span></span><br><span class="line"><span class="comment">//   let love = prompt(&#x27;你爱我吗?&#x27;)</span></span><br><span class="line"><span class="comment">//   if (love === &#x27;爱&#x27;) &#123;</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. for(;;) 无限循环</span></span><br><span class="line"><span class="keyword">for</span> (; ;) &#123;</span><br><span class="line">  <span class="keyword">let</span> love = <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (love === <span class="string">&#x27;爱&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="综合案例-ATM存取款机"><a href="#综合案例-ATM存取款机" class="headerlink" title="综合案例-ATM存取款机"></a>综合案例-ATM存取款机</h2><p><img src="C:\Users\19314\Desktop\JavaScript基础笔记和作业\JavaScript基础第二天\03-笔记\assets\1671018781557.png" alt="67101878155"></p>
<p>分析：</p>
<p>①：提示输入框写到循环里面（无限循环）</p>
<p>②：用户输入4则退出循环 break</p>
<p>③：提前准备一个金额预先存储一个数额 money</p>
<p>④：根据输入不同的值，做不同的操作</p>
<p>​     (1)  取钱则是减法操作， 存钱则是加法操作，查看余额则是直接显示金额</p>
<p>​     (2) 可以使用 if else if 多分支 来执行不同的操作</p>
<p>完整代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 1. 开始循环 输入框写到 循环里面</span></span><br><span class="line">  <span class="comment">// 3. 准备一个总的金额</span></span><br><span class="line">  <span class="keyword">let</span> money = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> re = +<span class="title function_">prompt</span>(<span class="string">`</span></span><br><span class="line"><span class="string">请您选择操作：</span></span><br><span class="line"><span class="string">1.存钱</span></span><br><span class="line"><span class="string">2.取钱</span></span><br><span class="line"><span class="string">3.查看余额</span></span><br><span class="line"><span class="string">4.退出</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">  <span class="comment">// 2. 如果用户输入的 4 则退出循环， break  写到if 里面，没有写到switch里面， 因为4需要break退出循环</span></span><br><span class="line">  <span class="keyword">if</span> (re === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 根据输入做操作</span></span><br><span class="line">  <span class="keyword">switch</span> (re) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="keyword">let</span> cun = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入存款金额&#x27;</span>)</span><br><span class="line">      money = money + cun</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="keyword">let</span> qu = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入取款金额&#x27;</span>)</span><br><span class="line">      money = money - qu</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">`您的银行卡余额是<span class="subst">$&#123;money&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="JavaScript-基础-第3天"><a href="#JavaScript-基础-第3天" class="headerlink" title="JavaScript 基础-第3天"></a>JavaScript 基础-第3天</h1><p><strong>if 多分支语句和 switch的区别：</strong></p>
<ol>
<li><p>共同点</p>
<ul>
<li>都能实现多分支选择， 多选1 </li>
<li>大部分情况下可以互换</li>
</ul>
</li>
<li><p>区别：</p>
<ul>
<li>switch…case语句通常处理case为比较<strong>确定值</strong>的情况，而if…else…语句更加灵活，通常用于<strong>范围判断</strong>(大于，等于某个范围)。</li>
<li>switch 语句进行判断后直接执行到程序的语句，效率更高，而if…else语句有几种判断条件，就得判断多少次</li>
<li>switch 一定要注意 必须是 &#x3D;&#x3D;&#x3D;  全等，一定注意 数据类型，同时注意break否则会有穿透效果</li>
<li>结论：<ul>
<li>当分支比较少时，if…else语句执行效率高。</li>
<li>当分支比较多时，switch语句执行效率高，而且结构更清晰。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><blockquote>
<p>掌握 for 循环语句，让程序具备重复执行能力</p>
</blockquote>
<p><code>for</code> 是 JavaScript 提供的另一种循环控制的话句，它和 <code>while</code> 只是语法上存在差异。</p>
<h3 id="for语句的基本使用"><a href="#for语句的基本使用" class="headerlink" title="for语句的基本使用"></a>for语句的基本使用</h3><ol>
<li>实现循环的 3 要素</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法格式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// for(起始值; 终止条件; 变化量) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   // 要重复执行的代码</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 示例：在网页中输入标题标签</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 起始值为 1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 变化量 i++</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 终止条件 i &lt;= 6</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;h<span class="subst">$&#123;i&#125;</span>&gt;循环控制，即重复执行&lt;h<span class="subst">$&#123;i&#125;</span>&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>变化量和死循环，<code>for</code> 循环和 <code>while</code> 一样，如果不合理设置增量和终止条件，便会产生死循环。</p>
</li>
<li><p>跳出和终止循环</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. continue </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">continue</span>  <span class="comment">// 结束本次循环，继续下一次循环</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. break</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>  <span class="comment">// 退出结束整个循环</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结论：</p>
<ul>
<li><code>JavaScript</code> 提供了多种语句来实现循环控制，但无论使用哪种语句都离不开循环的3个特征，即起始值、变化量、终止条件，做为初学者应着重体会这3个特征，不必过多纠结三种语句的区别。</li>
<li>起始值、变化量、终止条件，由开发者根据逻辑需要进行设计，规避死循环的发生。</li>
<li>当如果明确了循环的次数的时候推荐使用<code>for</code>循环,当不明确循环的次数的时候推荐使用<code>while</code>循环</li>
</ul>
<blockquote>
<p>注意：<code>for</code> 的语法结构更简洁，故 <code>for</code> 循环的使用频次会更多。</p>
</blockquote>
<h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><p>利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。</p>
<p><img src="C:\Users\19314\Desktop\JavaScript基础笔记和作业\JavaScript基础第三天\02-笔记\assets\universe.gif" alt="universe"></p>
<p>实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示：</p>
<p><img src="C:\Users\19314\Desktop\JavaScript基础笔记和作业\JavaScript基础第三天\02-笔记\assets\1647918261399.png" alt="64791826139"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 1. 外面的循环 记录第n天 </span><br><span class="line">for (let i = 1; i &lt; 4; i++) &#123;</span><br><span class="line">    document.write(`第$&#123;i&#125;天 <span class="tag">&lt;<span class="name">br</span>&gt;</span>`)</span><br><span class="line">    // 2. 里层的循环记录 几个单词</span><br><span class="line">    for (let j = 1; j &lt; 6; j++) &#123;</span><br><span class="line">        document.write(`记住第$&#123;j&#125;个单词<span class="tag">&lt;<span class="name">br</span>&gt;</span>`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记住，外层循环循环一次，里层循环循环全部</p>
<h4 id="倒三角"><a href="#倒三角" class="headerlink" title="倒三角"></a>倒三角</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 外层打印几行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 里层打印几个星星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;★&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="C:\Users\19314\Desktop\JavaScript基础笔记和作业\JavaScript基础第三天\02-笔记\assets\1647918678956.png" alt="64791867895"></p>
<h4 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h4><p>样式css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">192</span>, <span class="number">203</span>, .<span class="number">4</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">192</span>, <span class="number">203</span>, .<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>javascript </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 外层打印几行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 里层打印几个星星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="comment">// 只需要吧 ★ 换成  1 x 1 = 1   </span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt; <span class="subst">$&#123;j&#125;</span> x <span class="subst">$&#123;i&#125;</span> = <span class="subst">$&#123;j * i&#125;</span> &lt;/div&gt;</span></span><br><span class="line"><span class="string">     `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\19314\Desktop\JavaScript基础笔记和作业\JavaScript基础第三天\02-笔记\assets\1647918734677.png" alt="64791873467"></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote>
<p>知道什么是数组及其应用的场景，掌握数组声明及访问的语法。</p>
</blockquote>
<h3 id="数组是什么？"><a href="#数组是什么？" class="headerlink" title="数组是什么？"></a>数组是什么？</h3><p><strong>数组：</strong>(Array)是一种可以按顺序保存数据的数据类型</p>
<p><strong>使用场景：</strong>如果有多个数据可以用数组保存起来，然后放到一个变量中，管理非常方便</p>
<h3 id="数组的基本使用"><a href="#数组的基本使用" class="headerlink" title="数组的基本使用"></a>数组的基本使用</h3><h4 id="定义数组和数组单元"><a href="#定义数组和数组单元" class="headerlink" title="定义数组和数组单元"></a>定义数组和数组单元</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法，使用 [] 来定义一个空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个空数组，然后赋值给变量 classes</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// let classes = [];</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 定义非空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>[]</code> 定义数组，数据中可以存放真正的数据，如小明、小刚、小红等这些都是数组中的数据，我们这些数据称为数组单元，数组单元之间使用英文逗号分隔。</p>
<h4 id="访问数组和数组索引"><a href="#访问数组和数组索引" class="headerlink" title="访问数组和数组索引"></a>访问数组和数组索引</h4><p>使用数组存放数据并不是最终目的，关键是能够随时的访问到数组中的数据（单元）。其实 JavaScript 为数组中的每一个数据单元都编了号，通过数据单元在数组中的编号便可以轻松访问到数组中的数据单元了。</p>
<p>我们将数据单元在数组中的编号称为索引值，也有人称其为下标。</p>
<p>索引值实际是按着数据单元在数组中的位置依次排列的，注意是从<code> 0</code> 开始的，如下图所示：</p>
<p><img src="C:\Users\19314\Desktop\JavaScript基础笔记和作业\JavaScript基础第三天\02-笔记\assets\array.jpg" alt="array"></p>
<p>观察上图可以数据单元【小明】对应的索引值为【0】，数据单元【小红】对应的索引值为【2】</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 访问数组，语法格式为：变量名[索引值]</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">0</span>]) <span class="comment">// 结果为：小明</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">1</span>]) <span class="comment">// 结果为：小刚</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">4</span>]) <span class="comment">// 结果为：小米</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 通过索引值还可以为数组单重新赋值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">3</span>]) <span class="comment">// 结果为：小丽</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 重新为索引值为 3 的单元赋值</span></span></span><br><span class="line"><span class="language-javascript">  classes[<span class="number">3</span>] = <span class="string">&#x27;小小丽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">wirte</span>(classes[<span class="number">3</span>]); <span class="comment">// 结果为： 小小丽</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数据单元值类型"><a href="#数据单元值类型" class="headerlink" title="数据单元值类型"></a>数据单元值类型</h4><p>数组做为数据的集合，它的单元值可以是任意数据类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 6. 数组单值类型可以是任意数据类型</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// a) 数组单元值的类型为字符类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = [<span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// b) 数组单元值的类型为数值类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> scores = [<span class="number">78</span>, <span class="number">84</span>, <span class="number">70</span>, <span class="number">62</span>, <span class="number">75</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// c) 混合多种类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> mixin = [<span class="literal">true</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&#x27;hello&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数组长度属性"><a href="#数组长度属性" class="headerlink" title="数组长度属性"></a>数组长度属性</h4><p>重申一次，数组在 JavaScript 中并不是新的数据类型，它属于对象类型。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 数组对应着一个 length 属性，它的含义是获取数组的长度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>) <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><p>数组做为对象数据类型，不但有 <code>length</code> 属性可以使用，还提供了许多方法：</p>
<ol>
<li>push 动态向数组的尾部添加一个单元</li>
<li>unshit 动态向数组头部添加一个单元</li>
<li>pop 删除最后一个单元</li>
<li>shift 删除第一个单元</li>
<li>splice 动态删除任意单元</li>
</ol>
<p>使用以上4个方法时，都是直接在原数组上进行操作，即成功调任何一个方法，原数组都跟着发生相应的改变。并且在添加或删除单元时 <code>length</code> 并不会发生错乱。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. push 动态向数组的尾部添加一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Nodejs&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. unshit 动态向数组头部添加一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">unshift</span>(<span class="string">&#x27;VS Code&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. splice 动态删除任意单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// 从索引值为2的位置开始删除1个单元</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 4. pop 删除最后一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">pop</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 5. shift 删除第一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">shift</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="JavaScript-基础-第4天"><a href="#JavaScript-基础-第4天" class="headerlink" title="JavaScript 基础 - 第4天"></a>JavaScript 基础 - 第4天</h1><blockquote>
<p>理解封装的意义，能够通过函数的声明实现逻辑的封装，知道对象数据类型的特征，结合数学对象实现简单计算功能。</p>
</blockquote>
<ul>
<li>理解函数的封装的特征</li>
<li>掌握函数声明的语法</li>
<li>理解什么是函数的返回值</li>
<li>知道并能使用常见的内置函数</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote>
<p>理解函数的封装特性，掌握函数的语法规则</p>
</blockquote>
<h3 id="声明和调用"><a href="#声明和调用" class="headerlink" title="声明和调用"></a>声明和调用</h3><p>函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑，这么做的优势是有利于精简代码方便复用。</p>
<h4 id="声明（定义）"><a href="#声明（定义）" class="headerlink" title="声明（定义）"></a>声明（定义）</h4><p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p>
<p><img src="C:\Users\19314\Desktop\JavaScript基础笔记和作业\JavaScript基础第四天\03-笔记\assets\function.jpg" alt="function"></p>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和调用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数调用，这些函数体内的代码逻辑会被执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数名()</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复被调用，多少次都可以</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：函数名的命名规则与变量是一致的，并且尽量保证函数名的语义。</p>
</blockquote>
<p>小案例： 小星星</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 函数声明</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// document.write(&#x27;hai~&#x27;)</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`**&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`***&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`****&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*****&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`******&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*******&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`********&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*********&lt;br&gt;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 函数调用</span></span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。</p>
<p>声明（定义）一个功能为打招呼的函数</p>
<ul>
<li>传入数据列表</li>
<li>声明这个函数需要传入几个数据</li>
<li>多个数据用逗号隔开</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个功能为打招呼的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function sayHi() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;嗨~&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sayHi()</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个函数似乎没有什么价值，除非能够向不同的人打招呼</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这就需要借助参数来实现了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 参数 name 可以被理解成是一个变量</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span> + name)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用 sayHi 函数，括号中多了 &#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小明&#x27;</span>)<span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 再次调用 sayHi 函数，括号中多了 &#x27;小红&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小红&#x27;</span>) <span class="comment">// 结果为 小红</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>声明（定义）函数时的形参没有数量限制，当有多个形参时使用 <code>,</code> 分隔</li>
<li>调用函数传递的实参要与形参的顺序一致</li>
</ol>
<h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</p>
<p>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</p>
<p>形参可以理解为是在这个函数内声明的变量（比如 num1 &#x3D; 10）实参可以理解为是给这个变量赋值</p>
<p>开发中尽量保持形参和实参个数一致</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个计算任意两数字和的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 形参 x 和 y 分别表示任意两个数字，它们是两个变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，传入两个具体的数字做为实参</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时 10 赋值给了形参 x</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时 5  赋值给了形参 y</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">count</span>(<span class="number">10</span>, <span class="number">5</span>); <span class="comment">// 结果为 15</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？要想获得函数内部逻辑的执行结果，需要通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数返回值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义求和函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> s = a + b</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// s 即为 a + b 的结果</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过 return 将 s 传递到外部</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> s</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，如果一个函数有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 那么可将这个返回值赋值给外部的任意变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> total = <span class="title function_">count</span>(<span class="number">5</span>, <span class="number">12</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>在函数体中使用return 关键字能将内部的执行结果交给函数外部使用</li>
<li>函数内部只能出现1 次 return，并且 return 下一行代码不会再被执行，所以return 后面的数据不要换行写</li>
<li>return会立即结束当前函数</li>
<li>函数可以没有return，这种情况默认返回值为 undefined</li>
</ol>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p>
<p>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p>
<h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p>
<p>处于全局作用域内的变量，称为全局变量</p>
<h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</p>
<p>处于局部作用域内的变量称为局部变量</p>
<blockquote>
<p>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</p>
<p>但是有一种情况，函数内部的形参可以看做是局部变量。</p>
</blockquote>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>函数可以分为具名函数和匿名函数</p>
<p>匿名函数：没有名字的函数,无法直接使用。</p>
<h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; xxx  &#125;)();</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;xxxx&#125;());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>无需调用，立即执行，其实本质已经调用了</p>
<p>多个立即执行函数之间用分号隔开</p>
</blockquote>
<p>​		在能够访问到的情况下 先局部 局部没有在找全局</p>
<h1 id="JavaScript-基础-第5天"><a href="#JavaScript-基础-第5天" class="headerlink" title="JavaScript 基础 - 第5天"></a>JavaScript 基础 - 第5天</h1><blockquote>
<p>知道对象数据类型的特征，能够利用数组对象渲染页面</p>
</blockquote>
<ul>
<li>理解什么是对象，掌握定义对象的语法</li>
<li>掌握数学对象的使用</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote>
<p>对象是 JavaScript 数据类型的一种，之前已经学习了数值类型、字符串类型、布尔类型、undefined。对象数据类型可以被理解成是一种数据集合。它由属性和方法两部分构成。</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>声明一个对象类型的变量与之前声明一个数值或字符串类型的变量没有本质上的区别。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明字符串类型变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明数值类型变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">199</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明对象类型变量，使用一对花括号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// user 便是一个对象了，目前它是一个空对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性和访问"><a href="#属性和访问" class="headerlink" title="属性和访问"></a>属性和访问</h3><p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p>
<ol>
<li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>属性就是依附在对象上的变量</li>
<li>属性名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过对象描述一个人的数据信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// person 是一个对象，它包含了一个属性 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>声明对象，并添加了若干属性后，可以使用 <code>.</code> 或 <code>[]</code> 获得对象中属性对应的值，我称之为属性访问。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过对象描述一个人的数据信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// person 是一个对象，它包含了一个属性 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人的名字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人性别</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>) <span class="comment">// 结果为 男</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人的身高</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;stature&#x27;</span>]) <span class="comment">// 结果为 185</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 或者</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">stature</span>) <span class="comment">// 结果同为 185</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展：也可以动态为对象添加属性，动态添加与直接定义是一样的，只是语法上更灵活。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明一个空的对象（没有任何属性）</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态追加属性</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态添加与直接定义是一样的，只是语法上更灵活</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方法和调用"><a href="#方法和调用" class="headerlink" title="方法和调用"></a>方法和调用</h3><p>数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。</p>
<ol>
<li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>方法是依附在对象中的函数</li>
<li>方法名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法是依附在对象上的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跑的非常快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>声明对象，并添加了若干方法后，可以使用 <code>.</code> 或 <code>[]</code> 调用对象中函数，我称之为方法调用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法是依附在对象上的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跑的非常快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用对象中 singing 方法</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">singing</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用对象中的 run 方法</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">run</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展：也可以动态为对象添加方法，动态添加与直接定义是一样的，只是语法上更灵活。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明一个空的对象（没有任何属性，也没有任何方法）</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态追加属性</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态添加方法</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">move</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动一点距离...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</strong></p>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>null 也是 JavaScript 中数据类型的一种，通常只用它来表示不存在的对象。使用 typeof 检测类型它的类型时，结果为 <code>object</code>。</p>
<h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// k 属性名  字符串  带引号    obj.&#x27;uname&#x27;     k ===  &#x27;uname&#x27;</span></span><br><span class="line">    <span class="comment">// obj[k]  属性值    obj[&#x27;uname&#x27;]   obj[k]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for in 不提倡遍历数组 因为 k 是 字符串  </p>
<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>回想一下我们曾经使用过的 <code>console.log</code>，<code>console</code>其实就是 JavaScript 中内置的对象，该对象中存在一个方法叫 <code>log</code>，然后调用 <code>log</code> 这个方法，即 <code>console.log()</code>。</p>
<p>除了 <code>console</code> 对象外，JavaScritp 还有其它的内置的对象</p>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p><code>Math</code> 是 JavaScript 中内置的对象，称为数学对象，这个对象下即包含了属性，也包含了许多的方法。</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li>Math.PI，获取圆周率</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br></pre></td></tr></table></figure>

<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li>Math.random，生成 0 到 1 间的随机数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0 ~ 1 之间的随机数, 包含 0 不包含 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.ceil，数字向上取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 舍弃小数部分，整数部分加1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">3.4</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.floor，数字向下取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 舍弃小数部分，整数部分不变</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.68</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.round，四舍五入取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取整，四舍五入原则</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">5.46539</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.849</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.max，在一组数中找出最大的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">13</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.min，在一组数中找出最小的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">24</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">21</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.pow，幂方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求某个数的多少次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">4</span>, <span class="number">2</span>) <span class="comment">// 求 4 的 2 次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 求 2 的 3 次方</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Math.sqrt，平方根</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求某数的平方根</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<p>数学对象提供了比较多的方法，这里不要求强记，通过演示数学对象的使用，加深对对象的理解。</p>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js_day01</title>
    <url>/2022/12/13/node-js_day01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="为什么javascript可以在浏览器中被执行"><a href="#为什么javascript可以在浏览器中被执行" class="headerlink" title="为什么javascript可以在浏览器中被执行"></a>为什么javascript可以在浏览器中被执行</h3><p>浏览器中有JavaScript解析引擎。不同浏览器使用不同的解析引擎。</p>
<h3 id="常见的终端快捷键"><a href="#常见的终端快捷键" class="headerlink" title="常见的终端快捷键"></a>常见的终端快捷键</h3><ul>
<li>使用⬆键，可以快速定位到上一次执行的命令</li>
<li>使用tab键，可以快速补全路径</li>
<li>使用esc键，能够快速清空当前已输入的命令</li>
<li>输入cls命令，可以清空终端</li>
</ul>
<h3 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>fs模块是Node.js提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。</p>
<p>例如：</p>
<ul>
<li>fs.readFile()方法，用来读取指定文件的内容</li>
<li>fs.writeFile()方法，用来向指定的文件中写入内容</li>
</ul>
<p>如果要在javaScript代码中，使用fs模块来操作文件，则需要使用如下的方式先导入它：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="fs-readFie-的语法格式"><a href="#fs-readFie-的语法格式" class="headerlink" title="fs.readFie()的语法格式"></a>fs.readFie()的语法格式</h4><p>语法格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">fs.readFile(path[,options],callback)</span><br></pre></td></tr></table></figure>

<p>参数1：<strong>必选</strong>参数,字符串，表示文件路径。</p>
<p>参数2：可选参数，表示以什么编码格式来读取文件。</p>
<p>参数3：<strong>必选</strong>参数，文件读取完后，通过回调函数拿到读取的结果。</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.readFile(&#x27;./files/11.txt&#x27; ,&#x27;utf-8&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    console.log(&#x27;----&#x27;);</span><br><span class="line">    console.log(dataStr);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">&lt;!--文件中的内容为111 </span></span><br><span class="line"><span class="comment">文件读取成功输出结果为：</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="comment">111</span></span><br><span class="line"><span class="comment">文件读取失败输出结果为：</span></span><br><span class="line"><span class="comment">[Error: ENOENT: no such file or directory, open &#x27;D:\web前端\node.js\files\122.txt&#x27;] &#123;</span></span><br><span class="line"><span class="comment">  errno: -4058,</span></span><br><span class="line"><span class="comment">  code: &#x27;ENOENT&#x27;,</span></span><br><span class="line"><span class="comment">  syscall: &#x27;open&#x27;,</span></span><br><span class="line"><span class="comment">  path: &#x27;D:\\web前端\\node.js\\files\\122.txt&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="comment">undefined</span></span><br></pre></td></tr></table></figure>

<p>判断文件读取是否成功</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.readFile(&#x27;./files/11.txt&#x27;,&#x27;utf8&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        return console.log(&#x27;文件读取错误&#x27;+err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    return console.log(&#x27;文件读取成功&#x27; + dataStr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="fs-writeFile-的语法格式"><a href="#fs-writeFile-的语法格式" class="headerlink" title="fs.writeFile()的语法格式"></a>fs.writeFile()的语法格式</h4><p>语法格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">fs.writeFile(file,data[,option],callback)</span><br></pre></td></tr></table></figure>

<p>参数1：<strong>必选</strong>参数，需要一个指定文件路径的字符串，表示文件的存放路径</p>
<p>参数2：<strong>必选</strong>参数，表示要写入的内容</p>
<p>参数3：可选参数，表示以什么编码格式来写入文件内容，默认值为utf8。</p>
<p>参数4：<strong>必选</strong>参数，表示文件写入完成后的回调函数</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.writeFile(&#x27;./files/2.txt&#x27;,&#x27;Hello nide.js&#x27;,function(err)&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">写入成功，输出：null；反之，报错。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.writeFile(&#x27;F:/files/3.txt&#x27;,&#x27;Hello node.js&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        return console.log(&#x27;文件输入失败&#x27; + err.message);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    return console.log(&#x27;文件输出成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>fs.appendFileSync</code>()的语法格式</p>
<p>用法：<code>fs.appendFileSync</code>()方法用于将给定数据同步追加到文件中。如果不存在，则创建一个新文件。可选的options参数可用于修改操作的行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">appendFileSync</span>( path, data, options])</span><br><span class="line"><span class="comment">//参数：该方法接受上述和以下描述的三个参数：</span></span><br><span class="line"><span class="comment">//path:它是一个字符串，缓冲区，URL或数字，表示将附加的源文件名或文件描述符。</span></span><br><span class="line"><span class="comment">//data:它是一个字符串或缓冲区，表示必须附加的数据。</span></span><br><span class="line"><span class="comment">//options:它是一个字符串或对象，可用于指定将影响输出的可选参数。它具有三个可选参数：</span></span><br><span class="line"><span class="comment">//encoding:它是一个字符串，它指定文件的编码。默认值为“ utf8”。</span></span><br><span class="line"><span class="comment">//mode:它是一个整数，指定文件模式。默认值为“ 0o666”。</span></span><br><span class="line"><span class="comment">//flag:它是一个字符串，它指定附加到文件时使用的标志。默认值为‘a’。</span></span><br></pre></td></tr></table></figure>



<h4 id="案例：成绩整理"><a href="#案例：成绩整理" class="headerlink" title="案例：成绩整理"></a>案例：成绩整理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;); <span class="comment">&lt;!--文件内容为：小红=99 小白=100 小黄=70 小黑=66 小绿=88 --&gt;</span></span><br><span class="line">fs.readFile(&#x27;./files/3.txt&#x27;,&#x27;utf8&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    var arry1 =dataStr.split(&#x27; &#x27;);</span><br><span class="line">    var arrynew = [];</span><br><span class="line">    arry1.forEach(item =&gt;&#123;</span><br><span class="line">        arrynew.push(item.replace(&#x27;=&#x27;,&#x27;:&#x27;))</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    var newstring = arrynew.join(&#x27;\r\n&#x27;);</span><br><span class="line">    fs.writeFile(&#x27;./files/4.txt&#x27;,newstring,function(err,dataStr)&#123;</span><br><span class="line">      if(err)&#123;</span><br><span class="line">        return console.log(&#x27;文件读取失败&#x27;+err.message);</span><br><span class="line">      &#125;</span><br><span class="line">        return console.log(&#x27;文件写入成功&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">    // console.log(newstring);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="fs模块—路径动态拼接问题"><a href="#fs模块—路径动态拼接问题" class="headerlink" title="fs模块—路径动态拼接问题"></a>fs模块—路径动态拼接问题</h4><p>在使用fs模块操作文件时，如果提供的操作路径是以**.&#x2F;<strong>或</strong>..&#x2F;**开头的相对路径时，很容易出现路径动态拼接错误的问题。</p>
<p>原因：代码在运行的时候，会以执行node命令时所处的目录，动态拼接出被操作文件的完整路径。</p>
<p>解决方案:使用fs模块操作文件时，<strong>直接提供完整的路径</strong>，不要提供**.&#x2F;<strong>或</strong>..&#x2F;<strong>开头的相对路径，从而防止路径动态拼接的问题t提，使用</strong>__dirname**;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//判断文件是否读取成功  __dirname存储的是当前文件的绝对路径</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.readFile(__dirname+&#x27;/files/5.txt&#x27;,&#x27;utf8&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    if(err)</span><br><span class="line">   return console.log(&#x27;文件读取失败&#x27;+ err.message);</span><br><span class="line">   return console.log(&#x27;文件读取成功&#x27;+ dataStr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h3><p>path模块是node.js官方提供的、用以<strong>处理路径</strong>的模块。他提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p>
<p>如果要在javaScript代码中，使用path模块来处理路径，则需要使用如下的方式先导入它：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="path-join-拼接"><a href="#path-join-拼接" class="headerlink" title="path.join()拼接"></a>path.join()拼接</h4><p>使用path.join()方法，可以把多个路径的片段拼接为完整的路径字符串</p>
<p>注意:<strong>今后凡是涉及到路径拼接的操作，都要使用path.join（）方法进行处理</strong>。不要直接使用+进行字符串的拼接。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const pathStr = path.join(&#x27;/a&#x27;,&#x27;/b/c&#x27;,&#x27;../&#x27;,&#x27;/d&#x27;);</span><br><span class="line">console.log(pathStr);</span><br><span class="line">const pathStr2 = path.join(__dirname + &#x27;./files/3.txt&#x27;)</span><br><span class="line">console.log(pathStr2);</span><br></pre></td></tr></table></figure>

<h4 id="path-basename-获取路径文件名"><a href="#path-basename-获取路径文件名" class="headerlink" title="path.basename()获取路径文件名"></a>path.basename()获取路径文件名</h4><p>path.basename()方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名，语法格式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">path.basename(path[,ext])</span><br></pre></td></tr></table></figure>

<p>参数解读：</p>
<ul>
<li>path<string>必选参数，表示一个路径的字符串</li>
<li>ext<string>可选参数，表示文件扩展名</li>
<li>返回：<string>表示路径的最后一部分</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const fpath = &#x27;/a/b/c/d/index.html&#x27;</span><br><span class="line">var fullname = path.basename(fpath);</span><br><span class="line">console.log(fullname); </span><br><span class="line"></span><br><span class="line">var namewithoutext = path.basename(fpath,&#x27;.html&#x27;)</span><br><span class="line">console.log(namewithoutext);</span><br></pre></td></tr></table></figure>

<h4 id="path-extname-文件扩展名"><a href="#path-extname-文件扩展名" class="headerlink" title="path.extname()文件扩展名"></a>path.extname()文件扩展名</h4><p>使用path.extname()方法，可以获取路径中的扩展名部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const fpath = &#x27;/a/b/c/d/index.html&#x27;;</span><br><span class="line">var fullname = path.extname(fpath);</span><br><span class="line">console.log(fullname); </span><br></pre></td></tr></table></figure>

<h4 id="时钟案例"><a href="#时钟案例" class="headerlink" title="时钟案例"></a>时钟案例</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const regStyle = /<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml">[\s\S]*&lt;\/style&gt;/</span></span><br><span class="line"><span class="language-xml">const regScript = /<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">[\s\S]*<span class="language-xml">&lt;\/script&gt;</span>/</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname + <span class="string">&#x27;/clock/index.html&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (err) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取失败&#x27;</span> + err.<span class="property">message</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">resolveCSS</span>(dataStr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">resolveJS</span>(dataStr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">resolveHTML</span>(dataStr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">resolveCSS</span>(<span class="params">htmlStr</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> r1 = regStyle.<span class="title function_">exec</span>(htmlStr);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> newCSS = r1[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;&lt;style&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;</span></span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>&#x27;, &#x27;&#x27;)</span><br><span class="line">    fs.writeFile(path.join(__dirname + &#x27;/files/index.css&#x27;), newCSS, function (err, dataStr) &#123;</span><br><span class="line">        if (err)</span><br><span class="line">            return console.log(&#x27;CSS样式写入失败&#x27; + err.message)</span><br><span class="line">        console.log(&#x27;CSS样式写入成功&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolveJS(htmlStr)&#123;</span><br><span class="line">    const r1 = regScript.exec(htmlStr)</span><br><span class="line">    const newJS = r1[0].replace(&#x27;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="string">&#x27;,&#x27;</span><span class="string">&#x27;).replace(&#x27;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;,&#x27;&#x27;)</span><br><span class="line">    // console.log(newJS);</span><br><span class="line">    fs.writeFile(path.join(__dirname,&#x27;/files/index.js&#x27;),newJS,function(err)&#123;</span><br><span class="line">       if(err)</span><br><span class="line">        return console.log(&#x27;JS写入失败&#x27;+err.message);</span><br><span class="line">        console.log(&#x27;JS写入成功&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolveHTML(htmlStr)&#123;</span><br><span class="line">    const newHTML = htmlStr</span><br><span class="line">    .replace(regStyle,&#x27;<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../files/index.css&quot;</span>&gt;</span>&#x27;)</span><br><span class="line">    .replace(regScript,&#x27;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../files/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;) </span><br><span class="line">    console.log(newHTML);</span><br><span class="line">   fs.writeFile(path.join(__dirname+&#x27;/files/index.html&#x27;),newHTML,err =&gt;&#123;</span><br><span class="line">    if(err) return console.log(&#x27;HTML写入失败&#x27;+err.message)</span><br><span class="line">    console.log(&#x27;HTML写入成功&#x27;); </span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p>http模块是Node.js提供的、用来创建web服务器的模块。通过http模块提供的<code>http.createServer()</code>方法，就能方便的把一台普通电脑，变成一台web服务器，从而对外提供Web资源服务。</p>
<p>如果要希望使用http模块创建Web服务器，则需要先导入它：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="创建服务器的基本步骤"><a href="#创建服务器的基本步骤" class="headerlink" title="创建服务器的基本步骤"></a>创建服务器的基本步骤</h4><ol>
<li>导入http模块</li>
<li>创建web服务实例</li>
<li>为服务器实例绑定request事件，监听客户端请求</li>
<li>启动服务器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//导入http模块</span><br><span class="line">const http = require(&#x27;http&#x27;)</span><br><span class="line">//创建web服务实例</span><br><span class="line">const server = http.createServer()</span><br><span class="line">//为服务器实例绑定request事件，监听客户端请求</span><br><span class="line">server.on(&#x27;request&#x27;,function(req,res)&#123;</span><br><span class="line">    console.log(&#x27;Someone visit our website&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">启动服务器</span><br><span class="line">server.listen(8080,function()&#123;</span><br><span class="line">    console.log(&#x27;serve running at http://127.0.0.1:8080&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h4><p>只要服务器接收到客户端的请求，就会调用通过<code>server.on()</code>为服务器绑定request事件处理函数。如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server.on(&#x27;request&#x27;,req =&gt;&#123;</span><br><span class="line">// req是请求对象，它包含了与客户端相关的数据和属性</span><br><span class="line">// req.url 是客户端请求的url地址</span><br><span class="line">// req.method 是客户端method请求类型</span><br><span class="line">  const str = &#x27;Your request url is $&#123;req.url&#125;,and request method is $&#123;req.method&#125;&#x27;</span><br><span class="line">  console.log(str);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="res响应对象"><a href="#res响应对象" class="headerlink" title="res响应对象"></a>res响应对象</h4><p>在服务器的request事件处理函数中，如果想访问与服务器相关的数据或属性，可以使用如下的方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    const str = &#x27;Your request url is $&#123;req.url&#125;,and request method is $&#123;req.method&#125;&#x27;</span><br><span class="line">//向客户端发送指定请求的内容，并结束这次请求的处理过程</span><br><span class="line">    res.end(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="解决中文乱码的问题"><a href="#解决中文乱码的问题" class="headerlink" title="解决中文乱码的问题"></a>解决中文乱码的问题</h4><p>当调用<code>res.end()</code>方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要<strong>手动设置内容的编码格式</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    const str = &#x27;您请求的url地址是$&#123;req.url&#125;,请求的method类型 $&#123;req.method&#125;&#x27;</span><br><span class="line">   //解决中文乱码的问题</span><br><span class="line">    res.setHeader(&#x27;Content-Type&#x27;,&#x27;text/html;charset=utf-8&#x27;) </span><br><span class="line">    res.end(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="根据不同的url响应不同的html内容"><a href="#根据不同的url响应不同的html内容" class="headerlink" title="根据不同的url响应不同的html内容"></a>根据不同的url响应不同的html内容</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;)</span><br><span class="line">const server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(&#x27;request&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    const url = req.url</span><br><span class="line">    let content = &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>404 NOT FOUND<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br><span class="line">    if(url === &#x27;/&#x27;||url === &#x27;/index.html&#x27;)</span><br><span class="line">    content = &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br><span class="line">    else if(url === &#x27;/about.html&#x27;)&#123;</span><br><span class="line">        content = &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>关于首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    res.setHeader(&#x27;Content-Type&#x27;,&#x27;text/html;charset=utf-8&#x27;)</span><br><span class="line">    res.end(content)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(8080,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;Server is running at http://127.0.0.1:8080&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="案例—实现时钟的web路径"><a href="#案例—实现时钟的web路径" class="headerlink" title="案例—实现时钟的web路径"></a>案例—实现时钟的web路径</h4><p>把文件的实际存放路径，作为每个资源的请求url地址。</p>
<ol>
<li>导入需要的模块</li>
<li>创建基本的web服务器</li>
<li>将资源的请求url地址映射为文件的存放路径</li>
<li>读取文件内容并响应给客户端</li>
<li>优化资源的请求路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//导入模块</span><br><span class="line">const http = require(&#x27;http&#x27;)</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">//创建web服务器实例</span><br><span class="line">const server = http.createServer()</span><br><span class="line">//request响应页面</span><br><span class="line">server.on(&#x27;request&#x27;,(req,res) =&gt; &#123;</span><br><span class="line">    const url = req.url</span><br><span class="line">    let fpath = &#x27;&#x27;</span><br><span class="line">    if(url===&#x27;/&#x27;)&#123;</span><br><span class="line">        fpath = path.join(__dirname,&#x27;./files/index.html&#x27;)&#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            fpath = path.join(__dirname,&#x27;./clock/&#x27;,url)</span><br><span class="line">        &#125;</span><br><span class="line">    fs.readFile(fpath,&#x27;utf8&#x27;,(err,dataStr)=&gt;&#123;</span><br><span class="line">        // res.setHeader(&#x27;Content-Type&#x27;,&#x27;text/html;charset=utf-8&#x27;) 使用会出现css样式无法显示的问题</span><br><span class="line">        if(err)return res.end(&#x27;404 NOT FOUND&#x27;);</span><br><span class="line">        res.end(dataStr)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">//启动服务器</span><br><span class="line">server.listen(8080,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;Server is running at http://127.0.0.1:8080&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>picgo搭建图床</title>
    <url>/2022/12/01/picgo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="第一种-Github"><a href="#第一种-Github" class="headerlink" title="第一种  Github"></a>第一种  Github</h3><p>首先需要准备一个github账号</p>
<h4 id="登录你的Github-创建一个新的仓库"><a href="#登录你的Github-创建一个新的仓库" class="headerlink" title="登录你的Github,创建一个新的仓库"></a>登录你的Github,创建一个新的仓库</h4><ol>
<li>点击New repository进行创建<img src="https://s1.vika.cn/space/2022/12/25/396cab85f9ad4a69911c2185093e34c5"></li>
<li>填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 <code>public</code> 其他的保持默认就好；<img src="https://s1.vika.cn/space/2022/12/25/b6460e81ebbd480bac7615da036994fd" style="zoom:50%;" /></li>
<li>点击create repository进行创建，这样一个基本的GitHub就建立好了</li>
</ol>
<h4 id="利用picgo上传图片"><a href="#利用picgo上传图片" class="headerlink" title="利用picgo上传图片"></a>利用picgo上传图片</h4><p>通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Github 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 <a href="https://link.zhihu.com/?target=https://molunerfinn.com/PicGo/">PicGo</a>来作为我们的图片上传工具；</p>
<p>镜像下载地址：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85</a></p>
<h4 id="进行picgo的配置"><a href="#进行picgo的配置" class="headerlink" title="进行picgo的配置"></a>进行picgo的配置</h4><ol>
<li><p>首先在GitHub创建一个token（为了后续pico软件中与GitHub的绑定）；以此打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code>；</p>
</li>
<li><p>注意设置到期时间（Expiration），默认为30天，这里我选的是永久，勾选<strong>repo</strong>,<img src="https://s1.vika.cn/space/2022/12/25/907907f83ebf429bb25ae9fbbde30916" style="zoom:50%;" /></p>
</li>
<li><p>点击Generate token 进行创建</p>
</li>
<li><p>之后就会生成<code>token</code> ，(复制下来，后面会用到)注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建；</p>
</li>
<li><p>打开picgo,进入图床设置，点击GitHub<img src="https://s1.vika.cn/space/2022/12/25/8a1ed7be7bde483a9bf3ca0175bbc9c0" style="zoom:50%;" /></p>
</li>
<li><p>设定仓库名，就是前面创建的仓库（注意&#x2F;之间不要有空格）</p>
</li>
<li><p>设置分支，填写main</p>
</li>
<li><p>填写Token</p>
</li>
<li><p>为了加速访问，这时候我们就可以用 <a href="https://link.zhihu.com/?target=https://www.jsdelivr.com/">jsDelivr</a> 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；</p>
<blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/用户名/仓库名@main</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ol>
<h3 id="第二种-Vika-维格表-【推荐】"><a href="#第二种-Vika-维格表-【推荐】" class="headerlink" title="第二种   Vika(维格表)【推荐】"></a>第二种   Vika(维格表)【推荐】</h3><h4 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h4><p>在pico中下载插件vikadata,成功后会在pico中的图床设置中出现vika维格表，如图所示<img src="https://s1.vika.cn/space/2022/12/25/30974314e997489eb07e9cc54bb209d6" style="zoom:50%;" /></p>
<h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><p>在<a href="https://vika.cn/login">维格表 (vika.cn)</a>注册并登录</p>
<h4 id="新建空白维格表"><a href="#新建空白维格表" class="headerlink" title="新建空白维格表"></a>新建空白维格表</h4><p>点击左上角加号，进行创建表</p>
<img src="https://s1.vika.cn/space/2022/12/25/024c1f2508d44a59b5427ed74cc59a3b" style="zoom:50%;" />

<h4 id="设置API-token"><a href="#设置API-token" class="headerlink" title="设置API token"></a>设置API token</h4><p>在个人设置中的开发者设置中，点击+号，生成API token</p>
<img src="https://s1.vika.cn/space/2022/12/25/80fbdfc0eecc496e864dadc8729f4460" style="zoom:50%;" />

<h4 id="pico配置"><a href="#pico配置" class="headerlink" title="pico配置"></a>pico配置</h4><p>在图床设置中vika维格表中填写维格表ID与API token，打开维格表中的高级功能&#x2F;API&#x2F;GET获取，可以看到下面一串英文，在datasheet&#x2F;………..&#x2F;record这里中间…….的便是维格表的ID，在Bearer后面的便是对应的API token,这样就设置完毕了。</p>
]]></content>
      <categories>
        <category>picg</category>
      </categories>
      <tags>
        <tag>picgo</tag>
      </tags>
  </entry>
  <entry>
    <title>vue笔记</title>
    <url>/2022/11/29/vue%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="什么是vue？"><a href="#什么是vue？" class="headerlink" title="什么是vue？"></a>什么是vue？</h4><p>1.构建用户界面</p>
<ul>
<li>用vue往html页面中填入数据，非常的方便</li>
</ul>
<p>2.框架  （解决用户遇到的问题）</p>
<h4 id="vue的两个特性"><a href="#vue的两个特性" class="headerlink" title="vue的两个特性"></a>vue的两个特性</h4><p>1.数据驱动视图</p>
<ul>
<li>数据变化会驱动视图自动更新</li>
<li>页面结构会被vue自动渲染出来</li>
</ul>
<p>2.双向数据绑定</p>
<ul>
<li>在网页中form表单用于采集数据，Ajax负责提交数据<ul>
<li>js数据的变化，会被渲染到页面上</li>
<li>页面上的表单采集的数据发生变化时，会被vue自动获取到，并更新到js数据中</li>
</ul>
</li>
</ul>
<p>注意：数据驱动视图和双向数据绑定的底层原理时mvvm框架（Modle 数据源、View视图、ViewModle就是vue的实例）</p>
<h4 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h4><p>模板语法，用于辅助开发者渲染页面的基本结构</p>
<p>可以分为六大类：</p>
<h5 id="1-内容渲染指令"><a href="#1-内容渲染指令" class="headerlink" title="1.内容渲染指令"></a>1.内容渲染指令</h5><ul>
<li><p>v-text  缺点：v-text会覆盖元素内部原有的内容</p>
</li>
<li><p>插值表达式在实际开发中用的最多只是内容的占位符，不会覆盖原有的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;  插值表达式   //写入js表达式</span><br></pre></td></tr></table></figure>
</li>
<li><p>v-html  可以把带有标签的html指令，渲染成真正的HTML内容！</p>
</li>
</ul>
<h5 id="2-属性绑定指令"><a href="#2-属性绑定指令" class="headerlink" title="2.属性绑定指令"></a>2.属性绑定指令</h5><p>注意：插值表达式只能用在元素的内容节点中，不能用在元素的属性节点中</p>
<ul>
<li><p>v-bind 为元素属性动态的绑定值    bind的英文翻译：捆绑，系，包扎</p>
</li>
<li><p>在vue中规定可以用英文：简写</p>
</li>
<li><p>在使用v-bind属性绑定期间，如果绑定的内容需要进行动态拼接，则字符串的外面应该包裹单引号，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;&#x27;box&#x27;+index&quot;</span>&gt;</span>这是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-事件绑定指令"><a href="#3-事件绑定指令" class="headerlink" title="3.事件绑定指令"></a>3.事件绑定指令</h5><ul>
<li><p>v-on事件绑定指令 ，用来辅助辅助程序员为DOM元素绑定事件监听</p>
</li>
<li><p>v-on可以被简写为@</p>
</li>
<li><p>methods 定义事件的处理函数，与data,el平级, 语法格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">methods:&#123;</span><br><span class="line">         add()&#123;</span><br><span class="line">                 //如果在方法中要修改data中的数据，则可以通过this访问到</span><br><span class="line">                this.count += 1</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>$event 的应用场景，如果默认事件对象e被覆盖，则可以手动传递一个$event，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(3,$event)&quot;</span>&gt;</span>+N<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">methods:&#123;</span><br><span class="line">         add(n,e)&#123;</span><br><span class="line">             this.count+=n;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>事件修饰符</p>
<ol>
<li><p>prevent  阻止事件某种行为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&#x27;xxx&#x27;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>stop    阻止冒泡</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&#x27;xxx&#x27;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>按键修饰符</p>
<ul>
<li><p>监听键盘事件时，我们需要经常判断详细的按键。此时，可以键盘相关的事件添加按键修饰符</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.esc</span>=<span class="string">&#x27;clearinput&#x27;</span> <span class="attr">text</span>=<span class="string">&#x27;text&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyuo.enter</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">text</span>=<span class="string">&#x27;text&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>双向数据绑定</p>
<ol>
<li><p>v-model</p>
<ul>
<li><p>input输入框</p>
<ul>
<li>type&#x3D;”radio”</li>
<li>type&#x3D;”checkbox”</li>
<li>type&#x3D;”xxxx”</li>
</ul>
</li>
<li><p>textarea</p>
</li>
<li><p>select</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>v-model的修饰符</p>
<ul>
<li>.number   自动将用户的输入值转化为数值类型</li>
<li>.trim   自动过滤用户输入的首尾空白字符</li>
<li>.lazy   在”change”时而非”input”时更新 即非实时同步</li>
</ul>
</li>
</ol>
</li>
</ul>
<h5 id="4-条件渲染指令"><a href="#4-条件渲染指令" class="headerlink" title="4.条件渲染指令"></a>4.条件渲染指令</h5><ul>
<li><p>用来辅助开发者按需控制DOM的显示与隐藏。</p>
</li>
<li><p>条件渲染指令有两个</p>
<p>v-show   动态为元素添加或移除display：none样式，来实现元素的显示与隐藏</p>
<ul>
<li><p>如果频繁切换元素的显示状态，用v-show的性能会更好</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">data:&#123;</span><br><span class="line">flag:false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data的简写</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> +<span class="string">&#x27;-&#x27;</span>+lastname</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>v-if    每次动态的移除元素或添加元素</p>
<ul>
<li><p>如果刚进入页面的时候，某些元素默认不需要被展示，而且后期这个元素可能也不需要被展示出来（可能只在特定状态需要展示）此时v-if性能会更好</p>
</li>
<li><p>v-if可以单独使用，或配合v-else-if指令一起使用  注意：v-else必须配合v-if指令一起使用，否则他将不会被识别</p>
</li>
<li><p>v-else-if </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;type==&#x27;A&#x27;&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type==&#x27;B&#x27;&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type==&#x27;C&#x27;&quot;</span>&gt;</span>合格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>=<span class="string">&quot;type==&#x27;D&#x27;&quot;</span>&gt;</span>不合格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">data:&#123;</span><br><span class="line">type:&#x27;A&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h5 id="5-列表渲染指令"><a href="#5-列表渲染指令" class="headerlink" title="5.列表渲染指令"></a>5.列表渲染指令</h5><ul>
<li>v-for 基于一个数组来循环渲染一个列表结构.需要使用item in items形式的特殊语法。items是带循环的数组，item是被循环的每一项</li>
</ul>
<p>根据是否需要索引，来进行判断</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    data:&#123;</span><br><span class="line">    list:[</span><br><span class="line">    &#123;id:1,name:&#x27;zs&#x27;&#125;,</span><br><span class="line">    &#123;id:2,name:&#x27;ls&#x27;&#125;,</span><br><span class="line">    &#123;id:3,name:&#x27;ww&#x27;&#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>官方建议：只要用到了v-for指令，那么一定要绑定一个:key属性，而且尽量把id作为key的值，官方对于key值的类型是有要求的，字符串或数字类型，key的值不允许重复，否则终端会报错。</p>
<ul>
<li>:key的注意事项<ol>
<li>数值型或字符型</li>
<li>唯一性</li>
<li>不用index，索引不具有唯一性</li>
<li>建议使用数据项id作为key的值</li>
<li>建议使用v-for指令时一定要指定key的值</li>
</ol>
</li>
</ul>
<h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>定义：要用的属性不存在，要通过已有的属性计算出来</p>
<p>原理：底层借助了object.defineproperty方法提供的getter和setter</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;fullname&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="attr">fullname</span>:&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//this是vm,即vue实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ming</span> = arr[<span class="number">1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>get的作用：当有人读取fullname时，get就会被调用，且返回值作为fullname的值,内部有缓存机制</p>
<p>get什么时候调用：当初次读取fullnname时   当所依赖的数据发生变化时</p>
<p>简写</p>
<p>当只读不修改时才可以使用简写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="title function_">fullname</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> +<span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">               <span class="attr">ishot</span>:&#123;</span><br><span class="line">                   <span class="attr">immediate</span>:<span class="literal">true</span>,<span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">                   <span class="attr">deep</span>:<span class="literal">true</span>,<span class="comment">//实现深度监视</span></span><br><span class="line">                   <span class="comment">//handler什么时候调用，当ishot的值发生改变时</span></span><br><span class="line">                   <span class="title function_">handler</span>(<span class="params">newvalue,oldvalue</span>)&#123;</span><br><span class="line">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ishot值已经修改了&quot;</span>,newvalue,oldvalue);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><ul>
<li><p>过滤器函数必须被定义到filters节点之下</p>
</li>
<li><p>过滤器本质上是一个函数，过滤器函数中的形参val,永远是”管道符”前面的那个值</p>
</li>
<li><p>过滤器中一定要有一个返回值，即return返回值</p>
</li>
<li><p>如果全局过滤器与私有过滤器重名，此时按照就近原则，调用的是私有过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message | api&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  filters:&#123;</span><br><span class="line">        api(val)&#123;</span><br><span class="line">        const first = val.charAt(0).toUpperCase()</span><br><span class="line">        const other = val.slice(1)</span><br><span class="line">        return first + other</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>全局过滤器  注意Vue首字母大写 其次filter后不加s</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Vue.filter(&#x27;api&#x27;,function(str)&#123;</span><br><span class="line">       const first=str.charAt(0).toUpperCase()</span><br><span class="line">       const other=str.slice(1)</span><br><span class="line">       return first + other</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4><ul>
<li><p>所有的侦听器都应该被定义在watch节点下</p>
</li>
<li><p>侦听器本质上是一个函数，要监听哪个数据的变化，就把数据名作为方法名即可</p>
</li>
<li><p>watch侦听器允许开发者监听数据的变化，从而针对数据的变化做特定的操作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"> watch:&#123;</span><br><span class="line">            content(newval,oldval)&#123;</span><br><span class="line">                console.log(&#x27;你好&#x27;,newval,oldval)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>应用场景：用户名是否被占用</p>
</li>
</ul>
<h4 id="vue-cli的使用"><a href="#vue-cli的使用" class="headerlink" title="vue-cli的使用"></a>vue-cli的使用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli  //打开cmd安装vue-cli</span><br><span class="line">vue create 项目的名称  先定位到目录文件下再创建项目</span><br><span class="line">npm run serve 运行项目</span><br></pre></td></tr></table></figure>

<p>vue项目中src目录的构成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.assets 文件夹：存放项目中用到的静态资源文件，例如：css样式表、图片资源</span><br><span class="line">2.components 文件夹：程序员封装的、可复用的组件，都要放到components目录下</span><br><span class="line">3.main.js 是项目的入口文件。整个项目的运行要先执行main.js</span><br><span class="line">4.App.vue 项目的根组件</span><br></pre></td></tr></table></figure>

<p>vue通过main.js将Vue.js渲染到index.html中</p>
<h4 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h4><p>每个vue组件都由三个部分组成，组件是对UI结构的复用</p>
<ul>
<li><p>template 组件的模板结构</p>
</li>
<li><p>script :组件的javascript行为</p>
<ul>
<li><p>组件中的data必须是一个函数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//这个return出去&#123; &#125;中，定义数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>style:组件的样式</p>
</li>
</ul>
</li>
</ul>
<h4 id="vue的组件使用方法"><a href="#vue的组件使用方法" class="headerlink" title="vue的组件使用方法"></a>vue的组件使用方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">import  组件  from &#x27;组件url&#x27; //导入组件</span><br><span class="line">export default&#123;             //使用components节点注册组件</span><br><span class="line">Left</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>           //以标签形式使用刚才注册的组件</span><br><span class="line"><span class="tag">&lt;<span class="name">Left</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意事项：通过components组件注册的是私有子组件</p>
<h5 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h5><p>在vue项目中的main.js入口文件中,通过Vue.components()方法，可以注册全局组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">import count from &quot;@/components/count.vue&quot;</span><br><span class="line">vue.components(&#x27;Mycount&#x27;,count)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>专注于网络请求的库</p>
<p>调用axios方法得到的返回值是Promise对象</p>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>父组件向子组件传递</p>
<p>用户可自定义私有属性</p>
<p>props是只读的，不能直接去修改，否则会终端会报错。</p>
<p>想要修改props的值，可以把props的值转存到data中，应为data中数据是可读可写的</p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">   &lt;Student name=&quot;李四&quot; sex=&quot;女&quot; :age=&quot;30&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props:[&#x27;name&#x27;,&#x27;sex&#x27;,&#x27;age&#x27;]</span><br></pre></td></tr></table></figure>



<h4 id="id唯一值"><a href="#id唯一值" class="headerlink" title="id唯一值"></a>id唯一值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//uuid编码，唯一字符串 变种nanoid  采用npm i nanoid</span></span><br><span class="line"><span class="comment">//导入格式  import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span></span><br></pre></td></tr></table></figure>

<p>​       </p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>javaScript</title>
    <url>/2022/12/03/js%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="Array-prototype-fill"><a href="#Array-prototype-fill" class="headerlink" title="Array.prototype.fill()"></a>Array.prototype.fill()</h4><p>方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p>
<p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">fill(value)</span><br><span class="line">fill(value, start)</span><br><span class="line">fill(value, start, end)</span><br></pre></td></tr></table></figure>

<h4 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h4><p>将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E4%BD%BF%E7%94%A8%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1_array-like_objects">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。</p>
<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">join()</span><br><span class="line">join(separator)</span><br><span class="line"><span class="comment">&lt;!--指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果省略，数组元素用逗号（,）分隔。如果 separator 是空字符串（&quot;&quot;），则所有元素之间都没有任何字符。--&gt;</span></span><br></pre></td></tr></table></figure>

<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">reverse()</span><br><span class="line">const a = [1, 2, 3];</span><br><span class="line">console.log(a); // [1, 2, 3]</span><br><span class="line"></span><br><span class="line">a.reverse();</span><br><span class="line">console.log(a); // [3, 2, 1]</span><br></pre></td></tr></table></figure>



<h4 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a>Array.prototype.reverse()</h4><p>reverse()方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。</p>
<h4 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h4><p><strong><code>forEach()</code></strong> 方法对数组的每个元素执行一次给定的函数。</p>
<p>语法格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 箭头函数</span><br><span class="line">forEach((element) =&gt; &#123; /* … */ &#125;)</span><br><span class="line">forEach((element, index) =&gt; &#123; /* … */ &#125;)</span><br><span class="line">forEach((element, index, array) =&gt; &#123; /* … */ &#125;)</span><br><span class="line"></span><br><span class="line">// 回调函数</span><br><span class="line">forEach(callbackFn)</span><br><span class="line">forEach(callbackFn, thisArg)</span><br><span class="line"></span><br><span class="line">// 内联回调函数</span><br><span class="line">forEach(function(element) &#123; /* … */ &#125;)</span><br><span class="line">forEach(function(element, index) &#123; /* … */ &#125;)</span><br><span class="line">forEach(function(element, index, array)&#123; /* … */ &#125;)</span><br><span class="line">forEach(function(element, index, array) &#123; /* … */ &#125;, thisArg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h4><p><strong><code>filter()</code></strong> 方法创建给定数组一部分的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Shallow_copy">浅拷贝</a>，其包含通过所提供函数实现的测试的所有元素。</p>
<p>语法格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例二 数组返回偶数</span></span><br><span class="line">        <span class="keyword">const</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">26</span>];</span><br><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">        <span class="keyword">const</span> str1 = str.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(item%<span class="number">2</span>===<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str1);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">        <span class="keyword">const</span> str2 = str.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">2</span>===<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str2);</span><br></pre></td></tr></table></figure>

<p>Array.prototype.toString()</p>
<p>方法返回一个字符串，表示指定的数组及其元素</p>
<p>Array.prototype.toString(radix) 例如，当 radix 为 2 时，NumberObject 会被转换为二进制值表示的字符串。</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="String-prototype-charCodeAt"><a href="#String-prototype-charCodeAt" class="headerlink" title="String.prototype.charCodeAt()"></a>String.prototype.charCodeAt()</h4><p><strong><code>charCodeAt()</code></strong> 方法返回 <code>0</code> 到 <code>65535</code> 之间的整数，表示给定索引处的 UTF-16 代码单元</p>
<p>空格也计算其中</p>
<p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">str.charCodeAt(index)</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;ABC&quot;.charCodeAt(0) // returns 65:&quot;A&quot;</span><br><span class="line"></span><br><span class="line">&quot;ABC&quot;.charCodeAt(1) // returns 66:&quot;B&quot;</span><br><span class="line"></span><br><span class="line">&quot;ABC&quot;.charCodeAt(2) // returns 67:&quot;C&quot;</span><br><span class="line"></span><br><span class="line">&quot;ABC &quot;.charCodeAt(3) // returns 32：空格</span><br><span class="line">&quot;ABC &quot;.charCodeAt(4) // returns NaN</span><br></pre></td></tr></table></figure>

<h4 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h4><p>replace() 方法返回一个由替换值（<code>replacement</code>）替换部分或所有的模式（pattern）匹配项后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。如果pattern是字符串，则仅替换第一个匹配项。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">str.replace(regexp|substr, newSubStr|function)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面的例子中，正则表达式包含有全局替换 (g) 和忽略大小写 (i) 的选项，这使得 replace 方法用’oranges’替换掉了所有出现的”apples”.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var re = /apples/gi;</span><br><span class="line">var str = &quot;Apples are round, and apples are juicy.&quot;;</span><br><span class="line">var newstr = str.replace(re, &quot;oranges&quot;);</span><br><span class="line"></span><br><span class="line">// oranges are round, and oranges are juicy.</span><br><span class="line">console.log(newstr);</span><br></pre></td></tr></table></figure>



<h3 id="Set对象"><a href="#Set对象" class="headerlink" title="Set对象"></a>Set对象</h3><p>简述：对象是值的集合，你可以按照插入的顺序迭代它的元素。Set 中的元素只会出现一次，即 Set 中的元素是唯一的。</p>
<h4 id="Set-prototype-has"><a href="#Set-prototype-has" class="headerlink" title="Set.prototype.has()"></a>Set.prototype.has()</h4><p>返回一个布尔值来指示对应的值是否存在于 <code>Set</code> 对象中。</p>
<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">has(value)</span><br></pre></td></tr></table></figure>

<h4 id="Set-prototype-add"><a href="#Set-prototype-add" class="headerlink" title="Set.prototype.add()"></a>Set.prototype.add()</h4><p>如果 set对象中没有具有相同值的元素，则 <strong><code>add()</code></strong> 方法将插入一个具有指定值的新元素到 set对象中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">add(value)</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="if-null-的判断"><a href="#if-null-的判断" class="headerlink" title="if(null)的判断"></a>if(null)的判断</h4><p>if语句可以直接判断一个对象是否是null，null这个放在if语句里面做条件也相当于false</p>
<h4 id="js实现页面跳转功能"><a href="#js实现页面跳转功能" class="headerlink" title="js实现页面跳转功能"></a>js实现页面跳转功能</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="string">&#x27;https:..www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="javascript计时事件"><a href="#javascript计时事件" class="headerlink" title="javascript计时事件"></a>javascript计时事件</h3><h4 id="setInterval-方法-–-间隔指定的毫秒数不停地执行指定的代码。"><a href="#setInterval-方法-–-间隔指定的毫秒数不停地执行指定的代码。" class="headerlink" title="setInterval()方法 – 间隔指定的毫秒数不停地执行指定的代码。"></a>setInterval()方法 – 间隔指定的毫秒数不停地执行指定的代码。</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myvar = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>对应的停止方法为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(myvar)</span><br></pre></td></tr></table></figure>

<h4 id="setTimeout-方法-–-在指定的毫秒数后执行指定代码。"><a href="#setTimeout-方法-–-在指定的毫秒数后执行指定代码。" class="headerlink" title="setTimeout()方法 – 在指定的毫秒数后执行指定代码。"></a>setTimeout()方法 – 在指定的毫秒数后执行指定代码。</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myvar = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>对应的停止方法为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(myvar)</span><br></pre></td></tr></table></figure>

<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><h4 id="按位与-amp"><a href="#按位与-amp" class="headerlink" title="按位与&amp;"></a>按位与&amp;</h4><p>按位与（&amp;）运算符在两个操作数对应的二进位都为 1 时，该位的结果值才为 1。</p>
<h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p><img src="https://s1.vika.cn/space/2023/02/14/ce7b2ce9327a446c805ccffec9c18bcf"></p>
<h3 id="左移-lt-lt"><a href="#左移-lt-lt" class="headerlink" title="左移&lt;&lt;"></a>左移&lt;&lt;</h3><p>左移操作符 (<code>&lt;&lt;</code>) 将第一个操作数向左移动指定位数，左边超出的位数将会被清除，右边将会补零。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">5</span>;         <span class="comment">// 00000000000000000000000000000101</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;         <span class="comment">// 00000000000000000000000000000010</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a &lt;&lt; b); <span class="comment">// 00000000000000000000000000010100</span></span><br></pre></td></tr></table></figure>

<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ol>
<li><p>使用RegExp对象创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用字面量进行创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rg = <span class="regexp">/123/</span>  <span class="comment">//只要出现123即可</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h4><p>采用test()验证字符串是否符合正则表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rg = <span class="regexp">/123/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>))  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;1234&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;12&#x27;</span>))  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rg = <span class="regexp">/^abc$/</span>  <span class="comment">//只能出现abc  </span></span><br><span class="line"><span class="keyword">let</span> rg1 = <span class="regexp">/^[a-z]$/</span> <span class="comment">//a-z中的任意一个</span></span><br></pre></td></tr></table></figure>

<h5 id="字符组合"><a href="#字符组合" class="headerlink" title="字符组合"></a>字符组合</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rg = <span class="regexp">/^[a-zA-Z]$/</span>  <span class="comment">//只能出现26个字母中的任意一个大小写均可以</span></span><br></pre></td></tr></table></figure>

<h5 id="取反"><a href="#取反" class="headerlink" title="[^]取反"></a>[^]取反</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取反[^]  与边界符区分开</span></span><br><span class="line"><span class="keyword">let</span> rg4 = <span class="regexp">/[^a-zA-Z0-9_-]/</span>  <span class="comment">//a-zA-Z0-9_-这些均不可以取得</span></span><br></pre></td></tr></table></figure>

<h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><p>量词 设定某个模式出现的次数</p>
<ol>
<li><code>*</code>可以出现0次或多次  &gt;&#x3D;0</li>
<li><code>+</code>可以出现1次或多次  &gt;&#x3D;1</li>
<li><code>?</code>可以以出现0次或1次  0||1</li>
<li>{3}重复3次</li>
<li>{3，}重复3次及以上</li>
<li>{3，16}重复3到16次   <strong>16</strong>前面不能出现<strong>空格</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//* 可以出现0次或很多次  &gt;=0</span></span><br><span class="line"><span class="keyword">let</span> rg = <span class="regexp">/^a*/</span></span><br><span class="line"> <span class="comment">//+可以出现1次或很多次  &gt;=1</span></span><br><span class="line"><span class="keyword">let</span> rg2 = <span class="regexp">/^b+/</span></span><br><span class="line">   <span class="comment">//? 0||1 出现0次或1次</span></span><br><span class="line"><span class="keyword">let</span> rg3 = <span class="regexp">/^a?$/</span></span><br><span class="line"><span class="comment">//&#123;3&#125;重复3次</span></span><br><span class="line"><span class="keyword">let</span> rg4 = <span class="regexp">/^a&#123;3&#125;/</span></span><br><span class="line"> <span class="keyword">let</span> rg4 = <span class="regexp">/^abc&#123;3&#125;/</span>  <span class="comment">//c重复三次</span></span><br><span class="line">   <span class="comment">//&#123;3,&#125; 重复3次及以上</span></span><br><span class="line"><span class="keyword">let</span> rg5 = <span class="regexp">/^c&#123;3,&#125;/</span></span><br><span class="line"> <span class="comment">//&#123;3,6&#125;重复3到6次</span></span><br><span class="line"><span class="keyword">let</span> rg6 = <span class="regexp">/^d&#123;3,6&#125;$/</span></span><br></pre></td></tr></table></figure>

<p>用户名验证</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.green</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> rg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,8&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> name = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">     name.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(rg.<span class="title function_">test</span>(name.<span class="property">value</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">            span.<span class="property">className</span>= <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            span.<span class="property">innerText</span>= <span class="string">&#x27;用户名符合规范&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            span.<span class="property">className</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            span.<span class="property">innerText</span> = <span class="string">&#x27;用户名不符合规范&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(name.<span class="property">value</span>));</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  console.log(name);</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h4><ol>
<li>\d 匹配0-9之间的任意数字，相当于<code>[0-9]</code></li>
<li>\D匹配所有除0-9之间的数字，相当于<code>[^0-9]</code></li>
<li>\w匹配字母数字下划线，相当于<code>[a-zA-Z0-9_]</code></li>
<li>\W匹配除字母数字下划线以外的其他字符，相当于<code>[^a-zA-Z0-9_]</code></li>
<li>\s匹配空格(空格，换行，制表符等)，相当于<code>[\t\r\n\v\f]</code></li>
<li>\S匹配非空格的字符，相当于<code>[\t\r\n\v\f]</code></li>
</ol>
<h4 id="或者符号"><a href="#或者符号" class="headerlink" title="或者符号|"></a>或者符号<code>|</code></h4>]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ms</title>
    <url>/2023/02/13/ms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>事件发生时，会在目标节点到根节点按照特定的顺序传播，并在传播路径上所经过的所有节点上都接受该事件</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h4><p>由外向内的依次发生，如果在定义一个div的绑定事件，事件发生顺序为documet-&gt;html-&gt;body-&gt;div</p>
<h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p>由里向外依次发生，如果在定义一个div的绑定事件，事件发生的顺序为div-&gt;body-&gt;html-&gt;document</p>
<p>一般事件捕获用的比较少，大多数情况下使用事件冒泡</p>
<h4 id="典型"><a href="#典型" class="headerlink" title="典型"></a>典型</h4><p>事件冒泡可以用与事件委托</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a><code>js</code>数据类型</h3><p>基本数据类型：</p>
<ol>
<li>Number</li>
<li>String</li>
<li>Null</li>
<li>Undefined</li>
<li>Boolean</li>
<li>Symbol</li>
</ol>
<p>引用数据类型（复杂数据类型）</p>
<p>Object</p>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2_summary</title>
    <url>/2023/03/13/Vue2-summary/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="学习技巧"><a href="#学习技巧" class="headerlink" title="学习技巧"></a>学习技巧</h3><p>  自学   调bug  分析解决问题的能力</p>
<h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p>先指令  后绑定  在事件</p>
<h3 id="VC-Eslint配置"><a href="#VC-Eslint配置" class="headerlink" title="VC-Eslint配置"></a>VC-Eslint配置</h3><ol>
<li><p>设置中Tab Size改为2 </p>
</li>
<li><p>设置 Format On Save(勾选)</p>
</li>
<li><p>在<code>&#123;&#125;settings.json</code>进行配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js-beautify-html&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vetur.ignoreProjectWarning&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span><span class="number">300</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;js-beautify-html&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;wrap_attributes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Eslint常见的规则"><a href="#Eslint常见的规则" class="headerlink" title="Eslint常见的规则"></a>Eslint常见的规则</h3><p><img src="https://s1.vika.cn/space/2023/03/13/4d18ad141711402d839bb575aba2a372"></p>
<ol>
<li>不允许有多余的空行  </li>
<li>最后一行必须是空行</li>
</ol>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><ol>
<li><p>props 是用户自定义属性，允许使用者通过自定义属性，为当前组件指定初始值 是只读的，不能直接修改prop中的值  要想修改props中的值，可以把props中的值转存到data数据中再修改</p>
<p>​		——default 如果外界使用Count组件的时候，没有传递init属性，则默认值生效</p>
<p>​		——type 指定值的类型，常用的有Number,String,Boolean,Array,Object</p>
<p>​		——required（必填项） true 如果没有向组件传值，则终端会报错</p>
</li>
<li><p>props是组件的自定义属性，在封装通用组件的时候，合理使用props可以极大的提高组件的复用性</p>
<ol>
<li><p>scoped 指定样式只在当前组件中生效 原理：为组件中每个标签添加【data-v-001&#x2F;data-v-002】自定义标签，使得样式只渲染当前组件</p>
</li>
<li><p>&#x2F;deep&#x2F; 作用：修改子组件的样式</p>
<p> 应用场景：当使用第三方组件库的时候，如果要修改默认第三方组件的样式需求时，就要用到&#x2F;deep&#x2F;</p>
<p>注意：必须安装<code>npm i less</code>与<code>npm  i less-loader</code>才能使用</p>
</li>
<li><p>vue组件实例对象——如props中的count所示，count.vue就是构造函数，而<code>&lt;count&gt;&lt;/count&gt;</code>就是调用该组件（vue组件的实例对象）</p>
</li>
</ol>
</li>
</ol>
<h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><ol>
<li><p>beforeCreate函数，初始化事件和生命周期函数，此时，data,props,methods还未创建，都处于不可以用状态</p>
</li>
<li><p>created函数 初始化data,props,methods,组件中data,props,methods已创建好，都处于可用状态，但是组件的模板结构还未创建    可用于发送ajax请求，获得数据</p>
</li>
<li><p>beforeMount函数 将要把内存中的编译好的HTML结构渲染到浏览器中去，此时，浏览器中还没有当前组件的DOM结构</p>
</li>
<li><p>mounted函数 已经把内存中编译好的HTML结构渲染到浏览器中去，此时，浏览器中已经有了当前组件的DOM结构</p>
<p>注意：如果要操作组件中的DOM，最早再mounted中去操作</p>
</li>
<li><p>beforeUpdated函数 触发前提：数据被修改    将要根据变化后的数据渲染到ui结构中去   此时是新的数据，旧的ui结构</p>
</li>
<li><p>updated函数 已经把变化后的数据渲染到ui结构中去    此时，新的数据，新的ui结构</p>
</li>
<li><p>beforeDestory函数 将要销毁此组件，此时尚未销毁，组件还处于正常工作状态</p>
</li>
<li><p>destory函数   之前销毁当前组件的数据侦听器，子组件，事件监听</p>
<p>组件已经被销毁，此组件在浏览器中对应的DOM结构被完全移除</p>
</li>
</ol>
<h3 id="组件之间的关系"><a href="#组件之间的关系" class="headerlink" title="组件之间的关系"></a>组件之间的关系</h3><p>组件之间的关系：</p>
<ul>
<li><p>父子关系</p>
<ol>
<li><p>父子关系</p>
<p>父组件向子组件共享数据需要使用自定义属性（props）</p>
<p>​        子组件向父组件传递数据需要使用自定义事件</p>
</li>
</ol>
</li>
<li><p>兄弟关系</p>
<ol>
<li><p>(黑马)</p>
<p>可以采用eventBus，具体步骤如下：</p>
<ol>
<li>创建eventBus.js模块，并向外共享一个Vue实例对象</li>
<li>数据的发送方，调用bus.$emit(‘事件名称’，要发送的数据)方法触发自定义事件</li>
<li>数据的接受方，调用bus.$on(‘事件名称’，事件处理函数)方法注册一个自定义事件</li>
</ol>
</li>
<li><p>(尚硅谷)</p>
<p> 可以采用全局事件总线，具体步骤如下：</p>
<ol>
<li><p>在main.js模块，创建bus(全局总线)，是得组件都可以访问到bus,代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> beforeCreate()&#123;</span><br><span class="line">  //给Vue绑定全局事件总线</span><br><span class="line">  Vue.prototype.$bus=this</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>


</li>
<li><p>数据的发送方，调用bus.$emit(‘事件名称’，要发送的数据)方法触发自定义事件</p>
</li>
<li><p>数据的接受方，调用bus.$on(‘事件名称’，事件处理函数)方法注册一个自定义事件</p>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>ref:获取(DOM元素)&#x2F;(组件)的引用</p>
<p>​    每个vue组件身上包含：$refs,默认是一个空对象</p>
<p>​    vue优势： MVVM 在vue中，程序员不需要操作DOM。程序员只需要把数据维护好即可（数据驱动视图）</p>
<p>​    在vue中，需要操作DOM，可以采用ref方法     </p>
<h3 id="this-nextTick-cb"><a href="#this-nextTick-cb" class="headerlink" title="this.nextTick(cb)"></a>this.nextTick(cb)</h3><p>this.$nextTicl(callback) 当某些函数需要延迟到DOM重新渲染完毕后执行，就可调用此方法</p>
<p>​    等组件更新完毕完成之后，在执行回调函数。</p>
<h3 id="数组中的方法"><a href="#数组中的方法" class="headerlink" title="数组中的方法"></a>数组中的方法</h3><ol>
<li>some   循环开始后，可以在中间停止，采用固定的写法，<code>return ture</code>结束循环</li>
</ol>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>]</span><br><span class="line">	arr.<span class="title function_">some</span>(<span class="function">(<span class="params">val,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(val==<span class="string">&#x27;张三&#x27;</span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure>

<p>   forEach 循环一旦开始，无法在中间停止</p>
<ol start="2">
<li><p>every 判断数组中的每一项是否满足特定的条件 返回值是布尔值 案例：判断购物车是否全选</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">             &#123;<span class="attr">id</span>:<span class="number">001</span>,<span class="attr">name</span>:<span class="string">&#x27;草莓&#x27;</span>,<span class="attr">flag</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">id</span>:<span class="number">002</span>,<span class="attr">name</span>:<span class="string">&#x27;苹果&#x27;</span>,<span class="attr">flag</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">id</span>:<span class="number">003</span>,<span class="attr">name</span>:<span class="string">&#x27;香蕉&#x27;</span>,<span class="attr">flag</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">id</span>:<span class="number">004</span>,<span class="attr">name</span>:<span class="string">&#x27;香梨&#x27;</span>,<span class="attr">flag</span>:<span class="literal">true</span>&#125;</span><br><span class="line">         ]</span><br><span class="line">           <span class="comment">//判断每一项是否满足特定条件</span></span><br><span class="line">      <span class="keyword">const</span> sellecall = arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">flag</span>) <span class="comment">//返回值是布尔值</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(sellecall); <span class="comment">//false` </span></span><br></pre></td></tr></table></figure>



<ol>
<li><p>reduce  每次循环的结果累加起来	语法格式： arr.reduce((累加的和，循环的每一项)&#x3D;&gt;{},初始值)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">              &#123; <span class="attr">id</span>: <span class="number">001</span>, <span class="attr">name</span>: <span class="string">&#x27;草莓&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>,<span class="attr">price</span>:<span class="number">10</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">              &#123; <span class="attr">id</span>: <span class="number">002</span>, <span class="attr">name</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>,<span class="attr">price</span>:<span class="number">20</span>,<span class="attr">count</span>:<span class="number">2</span>&#125;,</span><br><span class="line">              &#123; <span class="attr">id</span>: <span class="number">003</span>, <span class="attr">name</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="attr">state</span>: <span class="literal">false</span>,<span class="attr">price</span>:<span class="number">30</span>,<span class="attr">count</span>:<span class="number">3</span>&#125;,</span><br><span class="line">              &#123; <span class="attr">id</span>: <span class="number">004</span>, <span class="attr">name</span>: <span class="string">&#x27;香梨&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>,<span class="attr">price</span>:<span class="number">40</span>,<span class="attr">count</span>:<span class="number">4</span>&#125;</span><br><span class="line">          ]</span><br><span class="line">       <span class="keyword">let</span> add = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">state</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum,item</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> sum+=item.<span class="property">price</span>*item.<span class="property">count</span></span><br><span class="line">           &#125;,<span class="number">0</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(add);<span class="comment">//210`</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="commonpent"><a href="#commonpent" class="headerlink" title="commonpent"></a>commonpent</h3><p>.compoment   组件的占位符   is表示要渲染的组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>

<h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>keep-alive 作用：保证组件被缓存，不被销毁</p>
<h4 id="keep-alive对应的生命周期"><a href="#keep-alive对应的生命周期" class="headerlink" title="keep-alive对应的生命周期"></a>keep-alive对应的生命周期</h4><p>​        当组件被缓存时，会自动触发组件的deactivated的生命周期函数</p>
<p>​        当组件被激活时，或自动触发组件的activated的生命周期函数</p>
<h4 id="keep-alive的两个属性"><a href="#keep-alive的两个属性" class="headerlink" title="keep-alive的两个属性"></a>keep-alive的两个属性</h4><p>​    include 只有名称匹配的组件才会被缓存，多个组件名之间用逗号隔开（英文逗号）</p>
<p>​    exclude 排除不需要的缓存项,也就是哪个组件写入exclude中，将不会被缓存</p>
<p>​    注意：include和exclude不能同时被使用</p>
<h3 id="组件注册名称与声明名称的区别"><a href="#组件注册名称与声明名称的区别" class="headerlink" title="组件注册名称与声明名称的区别"></a>组件注册名称与声明名称的区别</h3><p>​    组件的‘注册名称’的主要应用场景：以标签的形式，把注册好的组件，渲染和使用到页面结构中去</p>
<p>​    组件声明时候的name名称主要应用场景:结合<code>&lt;keep-alive&gt;</code>实现组件的缓存功能以及在调试工具中看到组件的name名称</p>
<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><h4 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h4><p>slot是指插槽，用于防止不确定的，由用户指定的位置</p>
<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="私有自定义组件"><a href="#私有自定义组件" class="headerlink" title="私有自定义组件"></a>私有自定义组件</h4><p>定义在directives节点下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line">                            <span class="attr">color</span>:&#123;</span><br><span class="line">                                <span class="comment">// bind 当指令第一次执行时，会立即触发bind函数</span></span><br><span class="line">                               <span class="comment">//形参中el表示当前指令所绑定的哪个DOM对象</span></span><br><span class="line">                               <span class="title function_">bind</span>(<span class="params">el</span>)&#123;</span><br><span class="line">                                el.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">                                     &#125;</span><br><span class="line">                               &#125;,</span><br><span class="line">                                <span class="comment">//当DOM节点更新时，才会触发update函数，第一次渲染时不执行，只执行bind函数</span></span><br><span class="line">                               <span class="title function_">update</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line">                                el.<span class="property">style</span>.<span class="property">color</span>=binding.<span class="property">value</span></span><br><span class="line">                               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;update执行&#x27;</span>);</span><br><span class="line">                              &#125;</span><br><span class="line">                           &#125;</span><br></pre></td></tr></table></figure>

<p>​    binding 监听被绑定的值</p>
<h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><p> 全局自定义事件  写在main.js中  与全局过滤器的写法类似</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局自定义事件</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>,&#123;</span><br><span class="line">         	<span class="title function_">bind</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line">        	 	el.<span class="property">style</span>.<span class="property">color</span>=binding.<span class="property">value</span></span><br><span class="line">          	&#125;,</span><br><span class="line">          	<span class="title function_">color</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line">           	el.<span class="property">style</span>.<span class="property">color</span>=binding.<span class="property">value</span></span><br><span class="line">         &#125;</span><br><span class="line">         &#125;) </span><br><span class="line"></span><br><span class="line">         <span class="comment">//简写形式</span></span><br><span class="line">          <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>,<span class="keyword">function</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line">          el.<span class="property">style</span>.<span class="property">color</span>=binding.<span class="property">value</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">        	 &#125;) </span><br></pre></td></tr></table></figure>

<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>使用：传递参数</p>
<h3 id="Vant"><a href="#Vant" class="headerlink" title="Vant"></a>Vant</h3><p>安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i vant@latest-v2 -S --legacy-peer-deps </span><br></pre></td></tr></table></figure>

<p>导入所有组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vant</span> <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vant/lib/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vant</span>);</span><br></pre></td></tr></table></figure>

<p>axios请求</p>
<p>安装axios命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install axios -S --legacy-peer-dep</span><br></pre></td></tr></table></figure>

<p>封装utiks&#x2F;request.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">created</span>(&#123;</span><br><span class="line">  <span class="comment">// 指定请求根路径</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://www.escook.cn&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>C++</title>
    <url>/2022/03/18/C++/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="C-书写格式"><a href="#C-书写格式" class="headerlink" title="C++书写格式"></a>C++书写格式</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	单行注释</span></span><br></pre></td></tr></table></figure>



<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多行注释*/</span></span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>作用：给一段指定的内存起名，方便管理这段内存</p>
<p>语法：数据类型	变量名 &#x3D; 	变量初始值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//变量声明并赋值</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>作用:用于记录程序中不可更改的数据</p>
<h3 id="define宏常量"><a href="#define宏常量" class="headerlink" title="#define	宏常量"></a>#define	宏常量</h3><p>语法：#define	常量名 	常量值</p>
<p>通常在文件上方定义</p>
<h3 id="const-修饰的变量"><a href="#const-修饰的变量" class="headerlink" title="const 修饰的变量"></a><code>const</code> 修饰的变量</h3><p>语法	<code>const</code> 数据类型  常量名 &#x3D; 常量值</p>
<p>通常在变量定义前加<code>const</code>,修饰该变量为常量，不可修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define 宏常量,不可修改</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Week 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的常量，也不可修改</span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> Month = <span class="number">12</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;一周有：&quot;</span> &lt;&lt; Week &lt;&lt; <span class="string">&quot;天&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;一年有：&quot;</span> &lt;&lt; Month &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>不要用<strong>关键字</strong>给变量或常量起名</p>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol>
<li>不能以关键字作为变量</li>
<li>标识符有字母、数字、下划线组成</li>
<li>标识符由字母、下划线开头</li>
<li>标识符区分大小写</li>
</ol>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br><span class="line"></span><br><span class="line">sudo apt-get install vim</span><br><span class="line">sudo apt-get install bear</span><br><span class="line"></span><br><span class="line">安装clangd</span><br><span class="line">sudo apt-get install clangd-12</span><br><span class="line"></span><br><span class="line">还为配置完毕，明天继续</span><br><span class="line">curl -fLo ~/.var/app/io.neovim.nvim/data/nvim/site/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\19314\AppData\Roaming\Typora\typora-user-images\image-20230320230052330.png" alt="image-20230320230052330"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>xuechuangbei</title>
    <url>/2022/04/28/xuechuangbei/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><img src="https://s1.vika.cn/space/2023/03/28/859da6cc3d25401ea1fe13a23e2e1827" style="zoom: 67%;" />

<img src="https://s1.vika.cn/space/2023/03/28/6035f4ee345d493d84e967de90af00dd"  />

<p><img src="https://s1.vika.cn/space/2023/03/28/bf3ab7df9c244bdaa61593a10ad04da0"></p>
<h3 id="操作顺序"><a href="#操作顺序" class="headerlink" title="操作顺序"></a>操作顺序</h3><ol>
<li>研发部——研发产品	（5产品3研发）</li>
<li>制造部——厂房，设备的购买</li>
<li>根据情况——是否贷款</li>
<li>人力资源部——招聘工人和销售——签订合同</li>
<li>制造部购买原料</li>
<li>生产车间——产品的生产</li>
<li><strong>产品报价</strong>——最高价+上限数（工人实际产出【存在损坏的】）</li>
<li>投放广告</li>
<li>市场开发</li>
</ol>
<h3 id="研发技巧"><a href="#研发技巧" class="headerlink" title="研发技巧"></a>研发技巧</h3><table>
<thead>
<tr>
<th></th>
<th align="center">不研发</th>
<th>研发</th>
</tr>
</thead>
<tbody><tr>
<td>商务</td>
<td align="center">113</td>
<td>3333（如果研发2个商务，第二个为3334&#x2F;1333）</td>
</tr>
<tr>
<td>白领</td>
<td align="center">1111，1121，113</td>
<td>1331</td>
</tr>
<tr>
<td>青年</td>
<td align="center">212，1121，112</td>
<td></td>
</tr>
<tr>
<td>老年</td>
<td align="center">121，122，111</td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>商务</th>
<th>白领</th>
<th>青年</th>
<th>老年</th>
</tr>
</thead>
<tbody><tr>
<td>0研</td>
<td>1</td>
<td>3</td>
<td>3</td>
<td>1</td>
</tr>
<tr>
<td>1研</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>2研</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>​	</p>
<h3 id="市场判断"><a href="#市场判断" class="headerlink" title="市场判断"></a>市场判断</h3><table>
<thead>
<tr>
<th align="left">市场开发</th>
<th>金额&#x2F;万</th>
</tr>
</thead>
<tbody><tr>
<td align="left">6</td>
<td>24</td>
</tr>
<tr>
<td align="left">5</td>
<td>18</td>
</tr>
<tr>
<td align="left">4</td>
<td>12</td>
</tr>
<tr>
<td align="left">3</td>
<td>8</td>
</tr>
<tr>
<td align="left">2</td>
<td>4</td>
</tr>
</tbody></table>
<p>​								</p>
<p>1205教室班级选择江苏大学，1211班级选择江苏大学2，1217教室选择江苏大学3</p>
<h3 id="打法技巧"><a href="#打法技巧" class="headerlink" title="打法技巧"></a>打法技巧</h3><p>1研+开5市场+**<code>CCC</code>**认证【第二季度认证】</p>
<h4 id="第一季度"><a href="#第一季度" class="headerlink" title="第一季度"></a>第一季度</h4><ol>
<li>【研发部】产品设计	【第一季度（1商务2白领1青年）或（1商务1白领2青年）】和 <strong>商务2</strong>【<strong>研发</strong>】</li>
<li>【研发部】点产品研发【商务2】</li>
<li>【制造部】厂房购置 ——租1小厂房（2个柔性线）   租 1中厂房（4个手工线）【<strong>季末退掉四个手工线和中厂房</strong>】</li>
<li>【人力资源部】招聘工人【4】与销售【1】【一个手工线招聘一个工人】</li>
<li>【人力资源部】签订合同</li>
<li>【销售部】产品报价</li>
<li>【市场部】开发市场（少开一个）【10万元】</li>
<li>预估市场【填表数组，估算市场】【市场部，广告投放查看】<strong>【总经理综合表现数组】</strong></li>
<li>【制造部】购买材料 注意折扣<img src="https://s1.vika.cn/space/2023/03/28/d7b71c7b4ff04083b9b7eb1203f01f3c"></li>
<li>【生产车间】投产</li>
<li>【销售部】报上限</li>
<li>【市场部】投广告</li>
<li>广告 商务1（10000以上）【12010】 白领（8000）【8011】 青年【4815】</li>
<li>【生产车间】<strong>季末退掉四个手工线和中厂房</strong></li>
<li>【生产车间】出售中厂房与4个手工线</li>
<li>【制造部】估算原料，再买第二季度的原料【需要紧急采购的】</li>
</ol>
<h4 id="第二季度"><a href="#第二季度" class="headerlink" title="第二季度"></a>第二季度</h4><ol>
<li><p>设计产品	【青年与老年】</p>
</li>
<li><p>开发市场</p>
</li>
<li><p><strong>资质认证</strong></p>
</li>
<li><p>调工人（调到同一个线上）</p>
</li>
<li><p>市场填写【注意时间填写<strong>确保每一组产品设计完</strong>】</p>
</li>
<li><p>购买原料</p>
</li>
<li><p>招工人&#x2F;招销售【根据产量确定是否需要招工人】</p>
</li>
<li><p>签订合同</p>
</li>
<li><p>投产【注意生产能力】</p>
</li>
<li><p>报价【报价与上线数】</p>
</li>
<li><p>投广告   主投商务1（10010）  其次白领（8010）  最后青年（4010）  老年不需要 商务2比较好，基本不需要投</p>
</li>
<li><p>估算第三季度的市场，购买原材料<strong>需要下一周期到的</strong>【注意市场开发如何，是不是其他组的开了】</p>
<p><strong>注意没有生产完的删表</strong></p>
</li>
<li><p>一个手工线5万</p>
</li>
</ol>
<h4 id="第三季度"><a href="#第三季度" class="headerlink" title="第三季度"></a>第三季度</h4><p><strong>资质认证</strong>十分重要</p>
<p>第三季度<strong>不需要购买原材料</strong>，到第四季度紧急采购就行，因为成绩只看第四季度的</p>
<p>第三季度也是防止紧急贷款</p>
<h4 id="第四季度-主打加产量"><a href="#第四季度-主打加产量" class="headerlink" title="第四季度[主打加产量]"></a>第四季度[主打加产量]</h4><p>预估市场十分重要</p>
<p>预留现金【10万左右】</p>
<p>注意<code>CCC</code>认证对白领与商务的影响</p>
<p>注意第四季度留钱5-6万防止紧急贷款</p>
<p>投广告时最后预留5万买小厂房增加投资表现</p>
<p>第四季度加大产量，适当买手工线加产</p>
<h4 id="签合同非常重要"><a href="#签合同非常重要" class="headerlink" title="签合同非常重要"></a>签合同非常重要</h4><h3 id="注意销售人员的销售能力为100"><a href="#注意销售人员的销售能力为100" class="headerlink" title="注意销售人员的销售能力为100"></a>注意销售人员的销售能力为100</h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>node-express</title>
    <url>/2023/03/29/node-express/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="express安装"><a href="#express安装" class="headerlink" title="express安装"></a>express安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i express@<span class="number">4.17</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<h3 id="express的基本使用"><a href="#express的基本使用" class="headerlink" title="express的基本使用"></a>express的基本使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用app.listen(端口号，回调函数)，启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Serve is running at http://127.0.0.1:8080&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="express发送get-x2F-post请求"><a href="#express发送get-x2F-post请求" class="headerlink" title="express发送get&#x2F;post请求"></a>express发送get&#x2F;post请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建WEB服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送GET请求,向客户端响应一个JSON对象</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送POST请求，向客户端响应一个文本</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/pass&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取参数,req.query获取客户端发送的数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//req.params动态获取参数</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/post/:id/:name&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running st http://127.0.0.1:9000&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; url, ip &#125; = req</span><br><span class="line">  fs.<span class="title function_">appendFileSync</span>(path.<span class="title function_">resolve</span>(__dirname + <span class="string">&#x27;/zhongjianjian.txt&#x27;</span>), <span class="string">`<span class="subst">$&#123;url&#125;</span>,<span class="subst">$&#123;ip&#125;</span>\r\n`</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;get请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/houtai&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;post请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running at http://127.0.0.1:8000&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;前台主页&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由中间件</span></span><br><span class="line"><span class="keyword">let</span> checkhome = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">code</span> === <span class="string">&#x27;123&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, checkhome, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;后台主页&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/settings&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;后台设置&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;个人信息&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9000，服务器开启成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>静态资源中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;前台主页&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由中间件</span></span><br><span class="line"><span class="keyword">let</span> checkhome = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">code</span> === <span class="string">&#x27;123&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, checkhome, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;后台主页&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/settings&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;后台设置&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;个人信息&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9000，服务器开启成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
</search>
