<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git的使用</title>
    <url>/2022/12/02/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h3><p>Git是一个开源的分布式版本控制系统</p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Aurora&quot;  <span class="comment">&lt;!--配置用户个人名称--&gt;</span></span><br><span class="line">$ git config --global user.email 1931414264@qq.com <span class="comment">&lt;!--配置用户的电子邮件--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode</title>
    <url>/2022/12/04/LeetCode/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="day-02"><a href="#day-02" class="headerlink" title="day_02"></a>day_02</h4><h5 id="1-FizzBuzz"><a href="#1-FizzBuzz" class="headerlink" title="1.FizzBuzz"></a>1.FizzBuzz</h5><p>题目：<img src="C:\Users\19314\AppData\Roaming\Typora\typora-user-images\image-20221204131345663.png" alt="image-20221204131345663"></p>
<p><img src="C:\Users\19314\AppData\Roaming\Typora\typora-user-images\image-20221204132120430.png" alt="image-20221204132120430"></p>
<p>步骤：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var FizzBuzz = function (n)&#123;</span><br><span class="line">    var m = [];</span><br><span class="line">    for(var i = 0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        var q = i+1;</span><br><span class="line">        if(q%3==0&amp;&amp;q%5==0)&#123;</span><br><span class="line">            m[i] = &#x27;FizzBuzz&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">         else if(q%3==0)&#123;</span><br><span class="line">            m[i] = &#x27;Fizz&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">         else if(q%5==0)</span><br><span class="line">         &#123;</span><br><span class="line">            m[i] = &#x27;Buzz&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">         else</span><br><span class="line">         m[i] = String(q)</span><br><span class="line">    &#125;</span><br><span class="line">    return m</span><br><span class="line">&#125;</span><br><span class="line">console.log(FizzBuzz(15));</span><br></pre></td></tr></table></figure>

<h5 id="2-数组中重复的数字"><a href="#2-数组中重复的数字" class="headerlink" title="2.数组中重复的数字"></a>2.数组中重复的数字</h5><p>题目：</p>
<p><img src="C:\Users\19314\AppData\Roaming\Typora\typora-user-images\image-20221204213831465.png" alt="image-20221204213831465"></p>
<p>步骤：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var findRepeatNumber = function (nums) &#123;</span><br><span class="line">  var num = new Set();</span><br><span class="line">  for(const s of nums)</span><br><span class="line">  &#123;  </span><br><span class="line">      if(num.has(s))</span><br><span class="line">      return s;</span><br><span class="line">          num.add(s)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="day-03"><a href="#day-03" class="headerlink" title="day_03"></a>day_03</h4><h5 id="1-替换字符"><a href="#1-替换字符" class="headerlink" title="1.替换字符"></a>1.替换字符</h5><p>题目：</p>
<p><img src="D:\myblog\source\img\study\替换空客.jpg"></p>
<p>步骤：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var replaceSpace = function(s) &#123;</span><br><span class="line">let c=&#x27;&#x27;;</span><br><span class="line">for(const x of s)&#123;</span><br><span class="line">    if(x!=&#x27; &#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">     c=c+x;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        c=c+&#x27;%20&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="2-从尾到头打印链表"><a href="#2-从尾到头打印链表" class="headerlink" title="2.从尾到头打印链表"></a>2.从尾到头打印链表</h5><p>题目：</p>
<p><img src="D:\myblog\source\img\study\从尾到头打印链表.jpg"></p>
<p>步骤：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var reversePrint = function(head) &#123;</span><br><span class="line">    if(!head)</span><br><span class="line">    return[];</span><br><span class="line">    var arr=[];</span><br><span class="line">    while(head)</span><br><span class="line">    &#123;</span><br><span class="line">        arr.push(head.val);</span><br><span class="line">        head=head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly美化页面</title>
    <url>/2022/11/30/butterfly%E7%BE%8E%E5%8C%96%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>hexo s</p>
<p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>
]]></content>
      <categories>
        <category>butterfly</category>
      </categories>
      <tags>
        <tag>butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery_day01</title>
    <url>/2022/11/30/jquery-day01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>获取元素固有的属性值：prop(),</p>
<p>设置元素属性prop(属性，属性值)</p>
<p>获取元素自定义的属性值：attr()</p>
]]></content>
      <categories>
        <category>jquery</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>js</title>
    <url>/2022/12/03/js/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><h5 id="Array-prototype-fill"><a href="#Array-prototype-fill" class="headerlink" title="Array.prototype.fill()"></a>Array.prototype.fill()</h5><p>方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p>
<p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">fill(value)</span><br><span class="line">fill(value, start)</span><br><span class="line">fill(value, start, end)</span><br></pre></td></tr></table></figure>

<h5 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h5><p>将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E4%BD%BF%E7%94%A8%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1_array-like_objects">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。</p>
<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">join()</span><br><span class="line">join(separator)</span><br><span class="line"><span class="comment">&lt;!--指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果省略，数组元素用逗号（,）分隔。如果 separator 是空字符串（&quot;&quot;），则所有元素之间都没有任何字符。--&gt;</span></span><br></pre></td></tr></table></figure>

<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">reverse()</span><br><span class="line">const a = [1, 2, 3];</span><br><span class="line">console.log(a); // [1, 2, 3]</span><br><span class="line"></span><br><span class="line">a.reverse();</span><br><span class="line">console.log(a); // [3, 2, 1]</span><br></pre></td></tr></table></figure>



<h5 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a>Array.prototype.reverse()</h5><p>reverse()方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。</p>
<h5 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h5><p><strong><code>forEach()</code></strong> 方法对数组的每个元素执行一次给定的函数。</p>
<p>语法格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 箭头函数</span><br><span class="line">forEach((element) =&gt; &#123; /* … */ &#125;)</span><br><span class="line">forEach((element, index) =&gt; &#123; /* … */ &#125;)</span><br><span class="line">forEach((element, index, array) =&gt; &#123; /* … */ &#125;)</span><br><span class="line"></span><br><span class="line">// 回调函数</span><br><span class="line">forEach(callbackFn)</span><br><span class="line">forEach(callbackFn, thisArg)</span><br><span class="line"></span><br><span class="line">// 内联回调函数</span><br><span class="line">forEach(function(element) &#123; /* … */ &#125;)</span><br><span class="line">forEach(function(element, index) &#123; /* … */ &#125;)</span><br><span class="line">forEach(function(element, index, array)&#123; /* … */ &#125;)</span><br><span class="line">forEach(function(element, index, array) &#123; /* … */ &#125;, thisArg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><h5 id="String-prototype-charCodeAt"><a href="#String-prototype-charCodeAt" class="headerlink" title="String.prototype.charCodeAt()"></a>String.prototype.charCodeAt()</h5><p><strong><code>charCodeAt()</code></strong> 方法返回 <code>0</code> 到 <code>65535</code> 之间的整数，表示给定索引处的 UTF-16 代码单元</p>
<p>空格也计算其中</p>
<p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">str.charCodeAt(index)</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;ABC&quot;.charCodeAt(0) // returns 65:&quot;A&quot;</span><br><span class="line"></span><br><span class="line">&quot;ABC&quot;.charCodeAt(1) // returns 66:&quot;B&quot;</span><br><span class="line"></span><br><span class="line">&quot;ABC&quot;.charCodeAt(2) // returns 67:&quot;C&quot;</span><br><span class="line"></span><br><span class="line">&quot;ABC &quot;.charCodeAt(3) // returns 32：空格</span><br><span class="line">&quot;ABC &quot;.charCodeAt(4) // returns NaN</span><br></pre></td></tr></table></figure>

<h5 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h5><p>replace() 方法返回一个由替换值（<code>replacement</code>）替换部分或所有的模式（pattern）匹配项后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。如果pattern是字符串，则仅替换第一个匹配项。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">str.replace(regexp|substr, newSubStr|function)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面的例子中，正则表达式包含有全局替换 (g) 和忽略大小写 (i) 的选项，这使得 replace 方法用’oranges’替换掉了所有出现的”apples”.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">var re = /apples/gi;</span><br><span class="line">var str = &quot;Apples are round, and apples are juicy.&quot;;</span><br><span class="line">var newstr = str.replace(re, &quot;oranges&quot;);</span><br><span class="line"></span><br><span class="line">// oranges are round, and oranges are juicy.</span><br><span class="line">console.log(newstr);</span><br></pre></td></tr></table></figure>



<h4 id="Set对象"><a href="#Set对象" class="headerlink" title="Set对象"></a>Set对象</h4><p>简述：对象是值的集合，你可以按照插入的顺序迭代它的元素。Set 中的元素只会出现一次，即 Set 中的元素是唯一的。</p>
<h5 id="Set-prototype-has"><a href="#Set-prototype-has" class="headerlink" title="Set.prototype.has()"></a>Set.prototype.has()</h5><p>返回一个布尔值来指示对应的值是否存在于 <code>Set</code> 对象中。</p>
<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">has(value)</span><br></pre></td></tr></table></figure>

<h5 id="Set-prototype-add"><a href="#Set-prototype-add" class="headerlink" title="Set.prototype.add()"></a>Set.prototype.add()</h5><p>如果 set对象中没有具有相同值的元素，则 <strong><code>add()</code></strong> 方法将插入一个具有指定值的新元素到 set对象中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">add(value)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js</title>
    <url>/2022/12/13/node-js_day_01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="为什么javascript可以在浏览器中被执行"><a href="#为什么javascript可以在浏览器中被执行" class="headerlink" title="为什么javascript可以在浏览器中被执行"></a>为什么javascript可以在浏览器中被执行</h4><p>浏览器中有JavaScript解析引擎。不同浏览器使用不同的解析引擎。</p>
<h4 id="常见的终端快捷键"><a href="#常见的终端快捷键" class="headerlink" title="常见的终端快捷键"></a>常见的终端快捷键</h4><ul>
<li>使用⬆键，可以快速定位到上一次执行的命令</li>
<li>使用tab键，可以快速补全路径</li>
<li>使用esc键，能够快速清空当前已输入的命令</li>
<li>输入cls命令，可以清空终端</li>
</ul>
<h4 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>fs模块是Node.js提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。</p>
<p>例如：</p>
<ul>
<li>fs.readFile()方法，用来读取指定文件的内容</li>
<li>fs.writeFile()方法，用来向指定的文件中写入内容</li>
</ul>
<p>如果要在javaScript代码中，使用fs模块来操作文件，则需要使用如下的方式先导入它：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="fs-readFie-的语法格式"><a href="#fs-readFie-的语法格式" class="headerlink" title="fs.readFie()的语法格式"></a>fs.readFie()的语法格式</h5><p>语法格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">fs.readFile(path[,options],callback)</span><br></pre></td></tr></table></figure>

<p>参数1：<strong>必选</strong>参数,字符串，表示文件路径。</p>
<p>参数2：可选参数，表示以什么编码格式来读取文件。</p>
<p>参数3：<strong>必选</strong>参数，文件读取完后，通过回调函数拿到读取的结果。</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.readFile(&#x27;./files/11.txt&#x27; ,&#x27;utf-8&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    console.log(&#x27;----&#x27;);</span><br><span class="line">    console.log(dataStr);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">&lt;!--文件中的内容为111 </span></span><br><span class="line"><span class="comment">文件读取成功输出结果为：</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="comment">111</span></span><br><span class="line"><span class="comment">文件读取失败输出结果为：</span></span><br><span class="line"><span class="comment">[Error: ENOENT: no such file or directory, open &#x27;D:\web前端\node.js\files\122.txt&#x27;] &#123;</span></span><br><span class="line"><span class="comment">  errno: -4058,</span></span><br><span class="line"><span class="comment">  code: &#x27;ENOENT&#x27;,</span></span><br><span class="line"><span class="comment">  syscall: &#x27;open&#x27;,</span></span><br><span class="line"><span class="comment">  path: &#x27;D:\\web前端\\node.js\\files\\122.txt&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="comment">undefined</span></span><br></pre></td></tr></table></figure>

<p>判断文件读取是否成功</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.readFile(&#x27;./files/11.txt&#x27;,&#x27;utf8&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        return console.log(&#x27;文件读取错误&#x27;+err.message);;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    return console.log(&#x27;文件读取成功&#x27; + dataStr);;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="fs-writeFile-的语法格式"><a href="#fs-writeFile-的语法格式" class="headerlink" title="fs.writeFile()的语法格式"></a>fs.writeFile()的语法格式</h5><p>语法格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">fs.writeFile(file,data[,option],callback)</span><br></pre></td></tr></table></figure>

<p>参数1：<strong>必选</strong>参数，需要一个指定文件路径的字符串，表示文件的存放路径</p>
<p>参数2：<strong>必选</strong>参数，表示要写入的内容</p>
<p>参数3：可选参数，表示以什么编码格式来写入文件内容，默认值为utf8。</p>
<p>参数4：<strong>必选</strong>参数，表示文件写入完成后的回调函数</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.writeFile(&#x27;./files/2.txt&#x27;,&#x27;Hello nide.js&#x27;,function(err)&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">写入成功，输出：null；反之，报错。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.writeFile(&#x27;F:/files/3.txt&#x27;,&#x27;Hello node.js&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        return console.log(&#x27;文件输入失败&#x27; + err.message);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    return console.log(&#x27;文件输出成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="案例：成绩整理"><a href="#案例：成绩整理" class="headerlink" title="案例：成绩整理"></a>案例：成绩整理</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;); <span class="comment">&lt;!--文件内容为：小红=99 小白=100 小黄=70 小黑=66 小绿=88 --&gt;</span></span><br><span class="line">fs.readFile(&#x27;./files/3.txt&#x27;,&#x27;utf8&#x27;,function(err,dataStr)&#123;</span><br><span class="line">    var arry1 =dataStr.split(&#x27; &#x27;);</span><br><span class="line">    var arrynew = [];</span><br><span class="line">    arry1.forEach(item =&gt;&#123;</span><br><span class="line">        arrynew.push(item.replace(&#x27;=&#x27;,&#x27;:&#x27;))</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    var newstring = arrynew.join(&#x27;\r\n&#x27;);</span><br><span class="line">    fs.writeFile(&#x27;./files/4.txt&#x27;,newstring,function(err,dataStr)&#123;</span><br><span class="line">      if(err)&#123;</span><br><span class="line">        return console.log(&#x27;文件读取失败&#x27;+err.message);</span><br><span class="line">      &#125;</span><br><span class="line">        return console.log(&#x27;文件写入成功&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">    // console.log(newstring);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_day_01</title>
    <url>/2022/12/14/linux-day-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="Linux基础知识"><a href="#Linux基础知识" class="headerlink" title="Linux基础知识"></a>Linux基础知识</h4><p>命令行：即<strong>Linux终端</strong>，是命令提示符页面。以纯字符的形式操作系统，可以使用字符化命令对系统发出指令。</p>
<p>命令：即<strong>Linux程序</strong>。一个命令就是一个Linux程序；命令没有图形化页面，可以在命令行（终端中）提供字符化的反馈。</p>
<p>绝对路径：以<strong>根目录为起点</strong>，描述路径的一种写法，路径描述以&#x2F;开头</p>
<p>相对路径：以<strong>当前路径为起点</strong>，描述路径的一种写法，路径无需以&#x2F;开头</p>
<h4 id="Linux命令基础格式"><a href="#Linux命令基础格式" class="headerlink" title="Linux命令基础格式"></a>Linux命令基础格式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">command [-options] [parameter]</span><br></pre></td></tr></table></figure>

<ul>
<li>command：命令本身</li>
<li>-options：[可选，非必填]命令 的一些选项，可以通过选项控制命令的行为细节</li>
<li>parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等</li>
</ul>
<h5 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h5><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ls [-a -l -h] [Linux路径]</span><br></pre></td></tr></table></figure>

<ul>
<li>-a选项，表示：all,列出全部文件（包含隐藏文件&#x2F;文件夹）<ul>
<li>以**.<strong>开头的，表示Linux系统的隐藏文件&#x2F;文件夹（只要以</strong>.**开头，就能自动隐藏）</li>
</ul>
</li>
<li>-l选项，表示：以列表（竖向排列）的形式展示内容，并展示更多的信息</li>
<li>-h选项，表示易于阅读的形式，列出文件大小，如K、G、M<ul>
<li>-h<strong>必须</strong>搭配 <strong>- l</strong>一起使用</li>
</ul>
</li>
</ul>
<h5 id="cd切换工作目录"><a href="#cd切换工作目录" class="headerlink" title="cd切换工作目录"></a>cd切换工作目录</h5><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cd [Linux路径]</span><br></pre></td></tr></table></figure>

<ul>
<li>cd命令无需选项，只有参数，表示要切换到哪个目录下</li>
<li>cd命令直接执行，不写参数，表示回到用户的HOME目录</li>
</ul>
<h5 id="pwd查看当前工作目录"><a href="#pwd查看当前工作目录" class="headerlink" title="pwd查看当前工作目录"></a>pwd查看当前工作目录</h5><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>

<ul>
<li>pwd命令，无选项，直接输入pwd即可</li>
</ul>
<h5 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h5><ul>
<li>**.**表示当前目录</li>
<li>**..**表示上一级目录</li>
<li>**~**表示HOME目录</li>
</ul>
<h5 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h5><p>通过mkdir命令可以创建新的目录（文件夹）</p>
<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mkdir [-p] Linux路径</span><br></pre></td></tr></table></figure>

<ul>
<li>参数必填，表示Linux路径，即要创建的文件的路径，相对路径或绝对路径均可</li>
<li>-p选项可选，表示自动创建不存在的父目录，使用于创建连续多层级的目录</li>
</ul>
<p><strong>注意</strong>：创建文件夹需要修改权限，请确保操作均在HOME目录内，不要再HOME外操作涉及到权限问题，HOME外无法成功，后续会学习权限管控的知识。</p>
<h5 id="文件操作命令part1（touch、cat、more）"><a href="#文件操作命令part1（touch、cat、more）" class="headerlink" title="文件操作命令part1（touch、cat、more）"></a>文件操作命令part1（touch、cat、more）</h5><h6 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">touch Linux路径</span><br></pre></td></tr></table></figure>

<ul>
<li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径均可以使用</li>
</ul>
<h6 id="cat查看文件内容"><a href="#cat查看文件内容" class="headerlink" title="cat查看文件内容"></a>cat查看文件内容</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cat Linux路径</span><br></pre></td></tr></table></figure>

<ul>
<li>cat同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径均可以使用</li>
</ul>
<h6 id="more查看文件内容"><a href="#more查看文件内容" class="headerlink" title="more查看文件内容"></a>more查看文件内容</h6><p>more命令同样可以查看文件内容，同cat不同的使：</p>
<ul>
<li>cat是直接将内容全部展示出来</li>
<li>more支持翻页，如果文件内容过多，可以一页页的展示</li>
</ul>
<p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">more Linux路径</span><br></pre></td></tr></table></figure>

<ul>
<li>同样没有选项，只有参数，参数表示：被查看的文件路径，相对、绝对、特殊路径均可以使用</li>
<li>在查看的过程中，通过空格翻页</li>
<li>通过q退出查看</li>
</ul>
<h5 id="文件操作命令（cp-mv-rm）"><a href="#文件操作命令（cp-mv-rm）" class="headerlink" title="文件操作命令（cp,mv,rm）"></a>文件操作命令（cp,mv,rm）</h5><h6 id="cp复制文件-x2F-文件夹"><a href="#cp复制文件-x2F-文件夹" class="headerlink" title="cp复制文件&#x2F;文件夹"></a>cp复制文件&#x2F;文件夹</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cp [-r] 参数1 参数2</span><br></pre></td></tr></table></figure>

<ul>
<li>-r选项，可选，用于复制文件夹使用，表示递归</li>
<li>参数1，Linux路径，表示被复制的文件夹</li>
<li>参数2，Linux路径，表示要复制去的地方</li>
</ul>
<h6 id="mv移动文件-x2F-文件夹"><a href="#mv移动文件-x2F-文件夹" class="headerlink" title="mv移动文件&#x2F;文件夹"></a>mv移动文件&#x2F;文件夹</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mv 参数1 参数2</span><br></pre></td></tr></table></figure>

<ul>
<li>参数1，Linux路径，表示要移动的文件或文件夹</li>
<li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保命令存在</li>
</ul>
<h6 id="rm删除文件-x2F-文件夹"><a href="#rm删除文件-x2F-文件夹" class="headerlink" title="rm删除文件&#x2F;文件夹"></a>rm删除文件&#x2F;文件夹</h6><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">rm [-r -f] 参数1 参数2 ...... 参数N</span><br></pre></td></tr></table></figure>

<ul>
<li>-r选项用于删除文件夹</li>
<li>-f表示force，强制删除（不会弹出提示确认消息）<ul>
<li>普通用户删除内容不会弹出提示，只有root管理用户删除内容会有提示</li>
<li>所以一般普通用户用不到-f选项</li>
</ul>
</li>
<li>参数1、参数2、……、参数N表示要删除的文件或文件夹路径，按照空格隔开</li>
</ul>
<p>rm命令支持通配符*，用来做模糊匹配</p>
<ul>
<li>符号*****表示通配符，即匹配任意内容（包含空），实例:<ul>
<li>test*,表示匹配任何以test开头的内容</li>
<li>*test,表示匹配任何以test结尾的内容</li>
<li><em><strong><strong>test</strong></strong></em>,表示匹配任何包含test的内容</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vue笔记</title>
    <url>/2022/11/29/vue%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="什么是vue？"><a href="#什么是vue？" class="headerlink" title="什么是vue？"></a>什么是vue？</h4><p>1.构建用户界面</p>
<ul>
<li>用vue往html页面中填入数据，非常的方便</li>
</ul>
<p>2.框架  （解决用户遇到的问题）</p>
<h4 id="vue的两个特性"><a href="#vue的两个特性" class="headerlink" title="vue的两个特性"></a>vue的两个特性</h4><p>1.数据驱动视图</p>
<ul>
<li>数据变化会驱动视图自动更新</li>
<li>页面结构会被vue自动渲染出来</li>
</ul>
<p>2.双向数据绑定</p>
<ul>
<li>在网页中form表单用于采集数据，Ajax负责提交数据<ul>
<li>js数据的变化，会被渲染到页面上</li>
<li>页面上的表单采集的数据发生变化时，会被vue自动获取到，并更新到js数据中</li>
</ul>
</li>
</ul>
<p>注意：数据驱动视图和双向数据绑定的底层原理时mvvm框架（Modle 数据源、View视图、ViewModle就是vue的实例）</p>
<h4 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h4><p>模板语法，用于辅助开发者渲染页面的基本结构</p>
<p>可以分为六大类：</p>
<h5 id="1-内容渲染指令"><a href="#1-内容渲染指令" class="headerlink" title="1.内容渲染指令"></a>1.内容渲染指令</h5><ul>
<li><p>v-text  缺点：v-text会覆盖元素内部原有的内容</p>
</li>
<li><p>插值表达式在实际开发中用的最多只是内容的占位符，不会覆盖原有的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;  插值表达式</span><br></pre></td></tr></table></figure>
</li>
<li><p>v-html  可以把带有标签的html指令，渲染成真正的HTML内容！</p>
</li>
</ul>
<h5 id="2-属性绑定指令"><a href="#2-属性绑定指令" class="headerlink" title="2.属性绑定指令"></a>2.属性绑定指令</h5><p>注意：插值表达式只能用在元素的内容节点中，不能用在元素的属性节点中</p>
<ul>
<li><p>v-bind 为元素属性动态的绑定值    bind的英文翻译：捆绑，系，包扎</p>
</li>
<li><p>在vue中规定可以用英文：简写</p>
</li>
<li><p>在使用v-bind属性绑定期间，如果绑定的内容需要进行动态拼接，则字符串的外面应该包裹单引号，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;&#x27;box&#x27;+index&quot;</span>&gt;</span>这是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-事件绑定指令"><a href="#3-事件绑定指令" class="headerlink" title="3.事件绑定指令"></a>3.事件绑定指令</h5><ul>
<li><p>v-on事件绑定指令 ，用来辅助辅助程序员为DOM元素绑定事件监听</p>
</li>
<li><p>v-on可以被简写为@</p>
</li>
<li><p>methods 定义事件的处理函数，与data,el平级, 语法格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">methods:&#123;</span><br><span class="line">         add()&#123;</span><br><span class="line">                 //如果在方法中要修改data中的数据，则可以通过this访问到</span><br><span class="line">                this.count += 1</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>$event 的应用场景，如果默认事件对象e被覆盖，则可以手动传递一个$event，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(3,$event)&quot;</span>&gt;</span>+N<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">methods:&#123;</span><br><span class="line">         add(n,e)&#123;</span><br><span class="line">             this.count+=n;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>事件修饰符</p>
<ol>
<li><p>prevent  阻止事件某种行为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&#x27;xxx&#x27;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>stop    阻止冒泡</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&#x27;xxx&#x27;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>按键修饰符</p>
<ul>
<li><p>监听键盘事件时，我们需要经常判断详细的按键。此时，可以键盘相关的事件添加按键修饰符</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.esc</span>=<span class="string">&#x27;clearinput&#x27;</span> <span class="attr">text</span>=<span class="string">&#x27;text&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyuo.enter</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">text</span>=<span class="string">&#x27;text&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>双向数据绑定</p>
<ol>
<li><p>v-model</p>
<ul>
<li><p>input输入框</p>
<ul>
<li>type&#x3D;”radio”</li>
<li>type&#x3D;”checkbox”</li>
<li>type&#x3D;”xxxx”</li>
</ul>
</li>
<li><p>textarea</p>
</li>
<li><p>select</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>v-model的修饰符</p>
<ul>
<li>.number   自动将用户的输入值转化为数值类型</li>
<li>.trim   自动过滤用户输入的首尾空白字符</li>
<li>.lazy   在”change”时而非”input”时更新 即非实时同步</li>
</ul>
</li>
</ol>
</li>
</ul>
<h5 id="4-条件渲染指令"><a href="#4-条件渲染指令" class="headerlink" title="4.条件渲染指令"></a>4.条件渲染指令</h5><ul>
<li><p>用来辅助开发者按需控制DOM的显示与隐藏。</p>
</li>
<li><p>条件渲染指令有两个</p>
<p>v-show   动态为元素添加或移除display：none样式，来实现元素的显示与隐藏</p>
<ul>
<li><p>如果频繁切换元素的显示状态，用v-show的性能会更好</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">data:&#123;</span><br><span class="line">flag:false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>v-if    每次动态的移除元素或添加元素</p>
<ul>
<li><p>如果刚进入页面的时候，某些元素默认不需要被展示，而且后期这个元素可能也不需要被展示出来（可能只在特定状态需要展示）此时v-if性能会更好</p>
</li>
<li><p>v-if可以单独使用，或配合v-else-if指令一起使用  注意：v-else必须配合v-if指令一起使用，否则他将不会被识别</p>
</li>
<li><p>v-else-if </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;type==&#x27;A&#x27;&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type==&#x27;B&#x27;&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type==&#x27;C&#x27;&quot;</span>&gt;</span>合格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>=<span class="string">&quot;type==&#x27;D&#x27;&quot;</span>&gt;</span>不合格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">data:&#123;</span><br><span class="line">type:&#x27;A&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h5 id="5-列表渲染指令"><a href="#5-列表渲染指令" class="headerlink" title="5.列表渲染指令"></a>5.列表渲染指令</h5><ul>
<li>v-for 基于一个数组来循环渲染一个列表结构.需要使用item in items形式的特殊语法。items是带循环的数组，item是被循环的每一项</li>
</ul>
<p>根据是否需要索引，来进行判断</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    data:&#123;</span><br><span class="line">    list:[</span><br><span class="line">    &#123;id:1,name:&#x27;zs&#x27;&#125;,</span><br><span class="line">    &#123;id:2,name:&#x27;ls&#x27;&#125;,</span><br><span class="line">    &#123;id:3,name:&#x27;ww&#x27;&#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>官方建议：只要用到了v-for指令，那么一定要绑定一个:key属性，而且尽量把id作为key的值，官方对于key值的类型是有要求的，字符串或数字类型，key的值不允许重复，否则终端会报错。</p>
<ul>
<li>:key的注意事项<ol>
<li>数值型或字符型</li>
<li>唯一性</li>
<li>不用index，索引不具有唯一性</li>
<li>建议使用数据项id作为key的值</li>
<li>建议使用v-for指令时一定要指定key的值</li>
</ol>
</li>
</ul>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><ul>
<li><p>过滤器函数必须被定义到filters节点之下</p>
</li>
<li><p>过滤器本质上是一个函数，过滤器函数中的形参val,永远是”管道符”前面的那个值</p>
</li>
<li><p>过滤器中一定要有一个返回值，即return返回值</p>
</li>
<li><p>如果全局过滤器与私有过滤器重名，此时按照就近原则，调用的是私有过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message | api&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  filters:&#123;</span><br><span class="line">        api(val)&#123;</span><br><span class="line">        const first = val.charAt(0).toUpperCase()</span><br><span class="line">        const other = val.slice(1)</span><br><span class="line">        return first + other</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>全局过滤器  注意Vue首字母大写 其次filter后不加s</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Vue.filter(&#x27;api&#x27;,function(str)&#123;</span><br><span class="line">       const first=str.charAt(0).toUpperCase()</span><br><span class="line">       const other=str.slice(1)</span><br><span class="line">       return first + other</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4><ul>
<li><p>所有的侦听器都应该被定义在watch节点下</p>
</li>
<li><p>侦听器本质上是一个函数，要监听哪个数据的变化，就把数据名作为方法名即可</p>
</li>
<li><p>watch侦听器允许开发者监听数据的变化，从而针对数据的变化做特定的操作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"> watch:&#123;</span><br><span class="line">            content(newval,oldval)&#123;</span><br><span class="line">                console.log(&#x27;你好&#x27;,newval,oldval)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>应用场景：用户名是否被占用</p>
</li>
</ul>
<h4 id="vue-cli的使用"><a href="#vue-cli的使用" class="headerlink" title="vue-cli的使用"></a>vue-cli的使用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli  //打开cmd安装vue-cli</span><br><span class="line">vue create 项目的名称  先定位到目录文件下再创建项目</span><br><span class="line">npm run serve 运行项目</span><br></pre></td></tr></table></figure>

<p>vue项目中src目录的构成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.assets 文件夹：存放项目中用到的静态资源文件，例如：css样式表、图片资源</span><br><span class="line">2.components 文件夹：程序员封装的、可复用的组件，都要放到components目录下</span><br><span class="line">3.main.js 是项目的入口文件。整个项目的运行要先执行main.js</span><br><span class="line">4.App.vue 项目的根组件</span><br></pre></td></tr></table></figure>

<p>vue通过main.js将Vue.js渲染到index.html中</p>
<h4 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h4><p>每个vue组件都由三个部分组成，组件是对UI结构的复用</p>
<ul>
<li><p>template 组件的模板结构</p>
</li>
<li><p>script :组件的javascript行为</p>
<ul>
<li><p>组件中的data必须是一个函数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//这个return出去&#123; &#125;中，定义数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>style:组件的样式</p>
</li>
</ul>
</li>
</ul>
<h4 id="vue的组件使用方法"><a href="#vue的组件使用方法" class="headerlink" title="vue的组件使用方法"></a>vue的组件使用方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">import  组件  from &#x27;组件url&#x27; //导入组件</span><br><span class="line">export default&#123;             //使用components节点注册组件</span><br><span class="line">Left</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>           //以标签形式使用刚才注册的组件</span><br><span class="line"><span class="tag">&lt;<span class="name">Left</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意事项：通过components组件注册的是私有子组件</p>
<h5 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h5><p>在vue项目中的main.js入口文件中,通过Vue.components()方法，可以注册全局组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">import count from &quot;@/components/count.vue&quot;</span><br><span class="line">vue.components(&#x27;Mycount&#x27;,count)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>专注于网络请求的库</p>
<p>调用axios方法得到的返回值是Promise对象</p>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>用户可自定义私有属性</p>
<p>props是只读的，不能直接去修改，否则会终端会报错。</p>
<p>想要修改props的值，可以把props的值转存到data中，应为data中数据是可读可写的</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
